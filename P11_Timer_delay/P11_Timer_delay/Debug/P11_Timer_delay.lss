
P11_Timer_delay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000018e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000072c  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000066f  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b0  00000000  00000000  00000fdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  0000128c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000387  00000000  00000000  000012f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001677  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6f 00 	call	0xde	; 0xde <main>
  88:	0c 94 8b 00 	jmp	0x116	; 0x116 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <conf_timer0>:
	TIFR0 = (0<<OCF0B)|(0<<OCF0A)|(0<<TOV0);//reti() modifica TOV0 |banderas de interruocion en 0
	
}

void start_timer0(){
	TCCR0B = (0<<FOC0A)|(0<<FOC0B)|(0<<WGM02)|(0<<CS02)|(0<<CS01)|(1<<CS00);//iniciar sin prescaler 
  90:	14 bc       	out	0x24, r1	; 36
  92:	15 bc       	out	0x25, r1	; 37
  94:	16 bc       	out	0x26, r1	; 38
  96:	88 ec       	ldi	r24, 0xC8	; 200
  98:	87 bd       	out	0x27, r24	; 39
  9a:	18 bc       	out	0x28, r1	; 40
  9c:	82 e0       	ldi	r24, 0x02	; 2
  9e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
  a2:	15 ba       	out	0x15, r1	; 21
  a4:	08 95       	ret

000000a6 <__vector_14>:
}

ISR(TIMER0_COMPA_vect,ISR_NAKED){
	TCNT0=0;//iniciamos contador en 0
  a6:	16 bc       	out	0x26, r1	; 38
	entrar++;
  a8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <entrar>
  ac:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <entrar+0x1>
  b0:	01 96       	adiw	r24, 0x01	; 1
	//cada vez entra 200um si entra 5 veces es para tener 1ms
	if(entrar==5){
  b2:	85 30       	cpi	r24, 0x05	; 5
  b4:	91 05       	cpc	r25, r1
  b6:	29 f0       	breq	.+10     	; 0xc2 <__vector_14+0x1c>
	TCCR0B = (0<<FOC0A)|(0<<FOC0B)|(0<<WGM02)|(0<<CS02)|(0<<CS01)|(1<<CS00);//iniciar sin prescaler 
}

ISR(TIMER0_COMPA_vect,ISR_NAKED){
	TCNT0=0;//iniciamos contador en 0
	entrar++;
  b8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <entrar+0x1>
  bc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <entrar>
  c0:	0d c0       	rjmp	.+26     	; 0xdc <__vector_14+0x36>
	//cada vez entra 200um si entra 5 veces es para tener 1ms
	if(entrar==5){
		entrar=0;
  c2:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <entrar+0x1>
  c6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <entrar>
		mili++;//acumula el milisegundo
  ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ce:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  d2:	01 96       	adiw	r24, 0x01	; 1
  d4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
	reti();//regreso de interrupcion y limpiamos la bandera
  dc:	18 95       	reti

000000de <main>:

int entrar = 0;
int mili = 0;

void conf_puertos(){
	DDRC=0b00001;
  de:	c1 e0       	ldi	r28, 0x01	; 1
  e0:	c7 b9       	out	0x07, r28	; 7


int main(void)
{
	conf_puertos();
	conf_timer0();
  e2:	0e 94 48 00 	call	0x90	; 0x90 <conf_timer0>
	TIFR0 = (0<<OCF0B)|(0<<OCF0A)|(0<<TOV0);//reti() modifica TOV0 |banderas de interruocion en 0
	
}

void start_timer0(){
	TCCR0B = (0<<FOC0A)|(0<<FOC0B)|(0<<WGM02)|(0<<CS02)|(0<<CS01)|(1<<CS00);//iniciar sin prescaler 
  e6:	c5 bd       	out	0x25, r28	; 37
int main(void)
{
	conf_puertos();
	conf_timer0();
	start_timer0();
	sei(); //habilita de manera global la interrupcion
  e8:	78 94       	sei
	
    while (1) 
    {
		if (mili==500)
		{
			PORTC=0b000001;
  ea:	21 e0       	ldi	r18, 0x01	; 1
	start_timer0();
	sei(); //habilita de manera global la interrupcion
	
    while (1) 
    {
		if (mili==500)
  ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  f4:	84 3f       	cpi	r24, 0xF4	; 244
  f6:	91 40       	sbci	r25, 0x01	; 1
  f8:	09 f4       	brne	.+2      	; 0xfc <main+0x1e>
		{
			PORTC=0b000001;
  fa:	28 b9       	out	0x08, r18	; 8
		}
		
		if (mili==1000)
  fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 100:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 104:	88 3e       	cpi	r24, 0xE8	; 232
 106:	93 40       	sbci	r25, 0x03	; 3
 108:	89 f7       	brne	.-30     	; 0xec <main+0xe>
		{
			PORTC=0b000000;
 10a:	18 b8       	out	0x08, r1	; 8
			mili=0;
 10c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 110:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 114:	eb cf       	rjmp	.-42     	; 0xec <main+0xe>

00000116 <_exit>:
 116:	f8 94       	cli

00000118 <__stop_program>:
 118:	ff cf       	rjmp	.-2      	; 0x118 <__stop_program>
