
P05_PIIR_int.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000755  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069f  00000000  00000000  00000919  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c8  00000000  00000000  00000fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001280  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bf  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00001693  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 4c 00 	jmp	0x98	; 0x98 <__vector_2>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  78:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <conf_puertos>:
#include <util/delay.h>
void conf_puertos();			//se declara ptroroptipo de funcion
void conf_iterrupcopn_externa();//prototipo interrupciopnes

void conf_puertos(){
	DDRB=0x01;		//salidas
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	84 b9       	out	0x04, r24	; 4
	DDRD=0x00;	//entradas
  84:	1a b8       	out	0x0a, r1	; 10
	PORTB=0x01;			//mantenemos el rele apagado
  86:	85 b9       	out	0x05, r24	; 5
  88:	08 95       	ret

0000008a <conf_iterrupcopn_externa>:
	
}

void conf_iterrupcopn_externa(){
	EICRA = (1<<ISC11)|(1<<ISC10)|(1<<ISC01)|(0<<ISC00);//Configura el registro de interrupcion con flacos de bajada 0b00001010
  8a:	8e e0       	ldi	r24, 0x0E	; 14
  8c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = (1<<INT1)|(0<<INT0);//habilitamos las iterrupciones INT0 e INT1
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	8d bb       	out	0x1d, r24	; 29
	EIFR = (0<<INTF1)|(0<<INTF0);//LIMPIAMOS LAS BANDERAS DE INTERRUPCION
  94:	1c ba       	out	0x1c, r1	; 28
  96:	08 95       	ret

00000098 <__vector_2>:
	
}

ISR(INT1_vect,ISR_NAKED){
	
	PORTB=0x00;//modulo de reles activa en 0
  98:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	2f ef       	ldi	r18, 0xFF	; 255
  9c:	3f ef       	ldi	r19, 0xFF	; 255
  9e:	86 e7       	ldi	r24, 0x76	; 118
  a0:	91 e0       	ldi	r25, 0x01	; 1
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	30 40       	sbci	r19, 0x00	; 0
  a6:	80 40       	sbci	r24, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	d9 f7       	brne	.-10     	; 0xa2 <__vector_2+0xa>
  ac:	00 c0       	rjmp	.+0      	; 0xae <__vector_2+0x16>
  ae:	00 00       	nop
	_delay_ms(10000);
	PORTB=0x01;
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	85 b9       	out	0x05, r24	; 5
	reti();//regresamos de interrupcion
  b4:	18 95       	reti

000000b6 <main>:
	
}

int main(void)
{
	conf_puertos();
  b6:	0e 94 40 00 	call	0x80	; 0x80 <conf_puertos>
	conf_iterrupcopn_externa();
  ba:	0e 94 45 00 	call	0x8a	; 0x8a <conf_iterrupcopn_externa>
	sei();//habilitar de forma global las interrupciones
  be:	78 94       	sei
	/* Replace with your application code */
	while (1)
	{
	}
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <main+0xa>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
