
P10_ADC8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000158  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ef  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000641  00000000  00000000  000008ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000260  00000000  00000000  00000f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001190  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000370  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001554  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  88:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <Ports_setup>:
unsigned int adc_valor=0;
void Ports_setup(); // Prototipos de las funciones
void ADC_setup(); //Prototipos de las funciones.
void Ports_setup() // Función para la configuración de los puertos
{
	DDRC = 0x00; // Puerto C entrada
  90:	17 b8       	out	0x07, r1	; 7
	DDRD = 0xFF; // Puerto D salida
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00; // Puerto D puesto en ceros.
  96:	1b b8       	out	0x0b, r1	; 11
  98:	08 95       	ret

0000009a <ADC_setup>:
}
void ADC_setup() // Función para la configuración de los registros del ADC
{
	ADMUX = (0<<REFS1)|(1<<REFS0)|(0<<ADLAR)|(0<<MUX3)|(0<<MUX2)|(0<<MUX1)|(0<<MUX0);
  9a:	80 e4       	ldi	r24, 0x40	; 64
  9c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1<<ADEN)|(1<<ADSC)|(1<<ADATE)|(0<<ADIF)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  a0:	8f ee       	ldi	r24, 0xEF	; 239
  a2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = (0<<ADTS2)|(0<<ADTS1)|(0<<ADTS0);
  a6:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	DIDR0 = (0<<ADC5D)|(0<<ADC4D)|(0<<ADC3D)|(0<<ADC2D)|(0<<ADC1D)|(0<<ADC0D);
  aa:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
  ae:	08 95       	ret

000000b0 <__vector_21>:
}
ISR(ADC_vect,ISR_NAKED) // Interrupción del ADC
{
	adc_valor = ADC;
  b0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  b4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  b8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  bc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	reti(); //Regreso de la interrupción
  c0:	18 95       	reti

000000c2 <main>:
}
int main(void) // Programa principal
{
	Ports_setup(); // Llamado de las funciones
  c2:	0e 94 48 00 	call	0x90	; 0x90 <Ports_setup>
	ADC_setup(); // Llamado de las funciones
  c6:	0e 94 4d 00 	call	0x9a	; 0x9a <ADC_setup>
	sei(); //Activa las interrupciones de forma global.
  ca:	78 94       	sei
	while(1)
	{
		PORTD = adc_valor/4; // Envía el valor del ADC (8 bits) por el puerto D
  cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  d0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  d4:	96 95       	lsr	r25
  d6:	87 95       	ror	r24
  d8:	96 95       	lsr	r25
  da:	87 95       	ror	r24
  dc:	8b b9       	out	0x0b, r24	; 11
		//TODO:: Please write your application code
	}
  de:	f6 cf       	rjmp	.-20     	; 0xcc <main+0xa>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
