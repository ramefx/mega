
Xmega_03_io.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ee  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00000342  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000342  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00000374  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003963  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000031e1  00000000  00000000  00003d53  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000612  00000000  00000000  00006f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00007548  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000029de  00000000  00000000  0000759c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004f  00000000  00000000  00009f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00009fc9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
   8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
   c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  10:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  14:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  18:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  1c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  20:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  24:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  28:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  2c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  30:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  34:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  38:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  3c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  40:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  44:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  48:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  4c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  50:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  54:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  58:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  5c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  60:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  64:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  68:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  6c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  70:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  74:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  78:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  7c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  80:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  84:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  88:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  8c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  90:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  94:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  98:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  9c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  a0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  a4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  a8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  ac:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  b0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  b4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  b8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  bc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  c0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  c4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  c8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  cc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  d0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  d4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  d8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  dc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  e0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  e4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  e8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  ec:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  f0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  f4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  f8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  fc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 100:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 104:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 108:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 10c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 110:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 114:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 118:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 11c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 120:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 124:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 128:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 12c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 130:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 134:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 138:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 13c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 140:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 144:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 148:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 14c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 150:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 154:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 158:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 15c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 160:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 164:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 168:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 16c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 170:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 174:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 178:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 17c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 180:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 184:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 188:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 18c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 190:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 194:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 198:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 19c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1a0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1a4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1a8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1ac:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1b0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1b4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1b8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1bc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1c0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1c4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1c8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1cc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1d0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1d4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1d8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1dc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1e0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1e4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1e8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1ec:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1f0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1f4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1f8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	0e 94 66 01 	call	0x2cc	; 0x2cc <main>
 210:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <_exit>

00000214 <__bad_interrupt>:
 214:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000218 <system_clocks_init>:
// System Clocks initialization
void system_clocks_init(void)
{
	unsigned char n,s;

	s=SREG;//guarda la configuracion inicial del estado de la habilitacion de las interrupciones
 218:	9f b7       	in	r25, 0x3f	; 63
	OSC.XOSCCTRL=OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_XTAL_16KCLK_gc;//seleccionar un cristal externo de 12 a 16 MHz
 21a:	e0 e5       	ldi	r30, 0x50	; 80
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	8b ec       	ldi	r24, 0xCB	; 203
 220:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL|=OSC_XOSCEN_bm;//startup time habilita EL USo DE UN OSCILADOR externo
 222:	80 81       	ld	r24, Z
 224:	88 60       	ori	r24, 0x08	; 8
 226:	80 83       	st	Z, r24

	while ((OSC.STATUS & OSC_XOSCRDY_bm)==0);//espera hata que sintoniza el oscilador
 228:	81 81       	ldd	r24, Z+1	; 0x01
 22a:	83 ff       	sbrs	r24, 3
 22c:	fd cf       	rjmp	.-6      	; 0x228 <system_clocks_init+0x10>
	
	//configuracion de multiplicadores PLL x2
	n=(OSC.PLLCTRL & (~(OSC_PLLSRC_gm | OSC_PLLDIV_bm | OSC_PLLFAC_gm))) |
 22e:	e0 e5       	ldi	r30, 0x50	; 80
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	85 81       	ldd	r24, Z+5	; 0x05
	OSC_PLLSRC_XOSC_gc | (0<<OSC_PLLDIV_bp) | 2;
	CCP=CCP_IOREG_gc;
 234:	28 ed       	ldi	r18, 0xD8	; 216
 236:	24 bf       	out	0x34, r18	; 52
	OSC.PLLCTRL=n;
 238:	82 ec       	ldi	r24, 0xC2	; 194
 23a:	85 83       	std	Z+5, r24	; 0x05

	OSC.CTRL|=OSC_PLLEN_bm;//habilitamos el PLL
 23c:	80 81       	ld	r24, Z
 23e:	80 61       	ori	r24, 0x10	; 16
 240:	80 83       	st	Z, r24
	
	//configuramos el factor de division de 1 para CKLPER
	n=(CLK.PSCTRL & (~(CLK_PSADIV_gm | CLK_PSBCDIV1_bm | CLK_PSBCDIV0_bm))) |
 242:	e0 e4       	ldi	r30, 0x40	; 64
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	81 81       	ldd	r24, Z+1	; 0x01
 248:	80 78       	andi	r24, 0x80	; 128
	CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;//divisores de 1
	CCP=CCP_IOREG_gc;
 24a:	24 bf       	out	0x34, r18	; 52
	CLK.PSCTRL=n;
 24c:	81 83       	std	Z+1, r24	; 0x01

	while ((OSC.STATUS & OSC_PLLRDY_bm)==0);//esperamos que se estabilice PLL
 24e:	e0 e5       	ldi	r30, 0x50	; 80
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	81 81       	ldd	r24, Z+1	; 0x01
 254:	84 ff       	sbrs	r24, 4
 256:	fd cf       	rjmp	.-6      	; 0x252 <system_clocks_init+0x3a>
	
	//conf el uso de PLL
	n=(CLK.CTRL & (~CLK_SCLKSEL_gm)) | CLK_SCLKSEL_PLL_gc;
 258:	e0 e4       	ldi	r30, 0x40	; 64
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	88 7f       	andi	r24, 0xF8	; 248
 260:	84 60       	ori	r24, 0x04	; 4
	CCP=CCP_IOREG_gc;
 262:	28 ed       	ldi	r18, 0xD8	; 216
 264:	24 bf       	out	0x34, r18	; 52
	CLK.CTRL=n;
 266:	80 83       	st	Z, r24
	
	//deshabilitar oscilador interno rc 2kHz 32kHz 32MHz
	OSC.CTRL&= ~(OSC_RC2MEN_bm | OSC_RC32MEN_bm | OSC_RC32KEN_bm);
 268:	e0 e5       	ldi	r30, 0x50	; 80
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	88 7f       	andi	r24, 0xF8	; 248
 270:	80 83       	st	Z, r24
	
	//salidas de freccuencia
	PORTCFG.CLKEVOUT&= ~(PORTCFG_CLKOUTSEL_gm | PORTCFG_CLKOUT_gm);
 272:	e0 eb       	ldi	r30, 0xB0	; 176
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	84 81       	ldd	r24, Z+4	; 0x04
 278:	80 7f       	andi	r24, 0xF0	; 240
 27a:	84 83       	std	Z+4, r24	; 0x04
	
	//restauramoe el estado inicial
	SREG=s;
 27c:	9f bf       	out	0x3f, r25	; 63
 27e:	08 95       	ret

00000280 <ports_init>:

}

void ports_init(void)
{
	PORTA.OUT=0x00;//colocamos la salida del puerto A en 00
 280:	e0 e0       	ldi	r30, 0x00	; 0
 282:	f6 e0       	ldi	r31, 0x06	; 6
 284:	14 82       	std	Z+4, r1	; 0x04
	
	PORTA.DIR=0x00; //Conf entradas 
 286:	10 82       	st	Z, r1
	
	//conf individual de los pines
	PORTA.PIN0CTRL=PORT_OPC_TOTEM_gc|PORT_ISC_BOTHEDGES_gc;
 288:	10 8a       	std	Z+16, r1	; 0x10

	PORTA.PIN1CTRL=PORT_OPC_TOTEM_gc|PORT_ISC_BOTHEDGES_gc;
 28a:	11 8a       	std	Z+17, r1	; 0x11

	PORTA.PIN2CTRL=PORT_OPC_TOTEM_gc|PORT_ISC_BOTHEDGES_gc;
 28c:	12 8a       	std	Z+18, r1	; 0x12
	
	PORTA.PIN3CTRL=PORT_OPC_TOTEM_gc|PORT_ISC_BOTHEDGES_gc;
 28e:	13 8a       	std	Z+19, r1	; 0x13

	PORTA.PIN4CTRL=PORT_OPC_TOTEM_gc|PORT_ISC_BOTHEDGES_gc;
 290:	14 8a       	std	Z+20, r1	; 0x14

	PORTA.PIN5CTRL=PORT_OPC_TOTEM_gc|PORT_ISC_BOTHEDGES_gc;
 292:	15 8a       	std	Z+21, r1	; 0x15

	PORTA.PIN6CTRL=PORT_OPC_TOTEM_gc|PORT_ISC_BOTHEDGES_gc;
 294:	16 8a       	std	Z+22, r1	; 0x16

	PORTA.PIN7CTRL=PORT_OPC_TOTEM_gc|PORT_ISC_BOTHEDGES_gc;
 296:	17 8a       	std	Z+23, r1	; 0x17
	//Interrupciones
	PORTA.INTCTRL=(PORTA.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |PORT_INT1LVL_OFF_gc | PORT_INT0LVL_OFF_gc;
 298:	81 85       	ldd	r24, Z+9	; 0x09
 29a:	80 7f       	andi	r24, 0xF0	; 240
 29c:	81 87       	std	Z+9, r24	; 0x09

	PORTA.INT0MASK=0x00;
 29e:	12 86       	std	Z+10, r1	; 0x0a

	PORTA.INT1MASK=0x00;
 2a0:	13 86       	std	Z+11, r1	; 0x0b
 2a2:	08 95       	ret

000002a4 <conf_puertoB>:

}
void conf_puertoB()
{
	PORTB.OUT=0x00;//colocamos la salida del puerto A en 00
 2a4:	e0 e2       	ldi	r30, 0x20	; 32
 2a6:	f6 e0       	ldi	r31, 0x06	; 6
 2a8:	14 82       	std	Z+4, r1	; 0x04
	
	PORTB.DIR=0xF0; //configuracion salidaEscribimos unos en el puerto a
 2aa:	80 ef       	ldi	r24, 0xF0	; 240
 2ac:	80 83       	st	Z, r24
	
	//conf individual de los pines
	PORTB.PIN0CTRL=PORT_OPC_TOTEM_gc;
 2ae:	10 8a       	std	Z+16, r1	; 0x10

	PORTB.PIN1CTRL=PORT_OPC_TOTEM_gc;
 2b0:	11 8a       	std	Z+17, r1	; 0x11

	PORTB.PIN2CTRL=PORT_OPC_TOTEM_gc;
 2b2:	12 8a       	std	Z+18, r1	; 0x12
	
	PORTB.PIN3CTRL=PORT_OPC_TOTEM_gc;
 2b4:	13 8a       	std	Z+19, r1	; 0x13

	PORTB.PIN4CTRL=PORT_OPC_TOTEM_gc;
 2b6:	14 8a       	std	Z+20, r1	; 0x14

	PORTB.PIN5CTRL=PORT_OPC_TOTEM_gc;
 2b8:	15 8a       	std	Z+21, r1	; 0x15

	PORTB.PIN6CTRL=PORT_OPC_TOTEM_gc;
 2ba:	16 8a       	std	Z+22, r1	; 0x16

	PORTB.PIN7CTRL=PORT_OPC_TOTEM_gc;
 2bc:	17 8a       	std	Z+23, r1	; 0x17
	//Interrupciones
	PORTB.INTCTRL=(PORTA.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |PORT_INT1LVL_OFF_gc | PORT_INT0LVL_OFF_gc;
 2be:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <__TEXT_REGION_LENGTH__+0x700609>
 2c2:	80 7f       	andi	r24, 0xF0	; 240
 2c4:	81 87       	std	Z+9, r24	; 0x09

	PORTB.INT0MASK=0x00;
 2c6:	12 86       	std	Z+10, r1	; 0x0a

	PORTB.INT1MASK=0x00;
 2c8:	13 86       	std	Z+11, r1	; 0x0b
 2ca:	08 95       	ret

000002cc <main>:
}
int main(void)
{
	system_clocks_init();
 2cc:	0e 94 0c 01 	call	0x218	; 0x218 <system_clocks_init>

	ports_init();
 2d0:	0e 94 40 01 	call	0x280	; 0x280 <ports_init>
	
	conf_puertoB();
 2d4:	0e 94 52 01 	call	0x2a4	; 0x2a4 <conf_puertoB>
	//PORTA.OUT=0x01;
	//_delay_ms(300);
	while (1)
	{
		
		PORTB.OUT=PORTA.IN;
 2d8:	a0 e0       	ldi	r26, 0x00	; 0
 2da:	b6 e0       	ldi	r27, 0x06	; 6
 2dc:	e0 e2       	ldi	r30, 0x20	; 32
 2de:	f6 e0       	ldi	r31, 0x06	; 6
 2e0:	18 96       	adiw	r26, 0x08	; 8
 2e2:	8c 91       	ld	r24, X
 2e4:	18 97       	sbiw	r26, 0x08	; 8
 2e6:	84 83       	std	Z+4, r24	; 0x04
		/*_delay_ms(300);
		if (PORTA.OUT==128)
		{
			PORTA.OUT=0x00;
		}*/
	}
 2e8:	fb cf       	rjmp	.-10     	; 0x2e0 <main+0x14>

000002ea <_exit>:
 2ea:	f8 94       	cli

000002ec <__stop_program>:
 2ec:	ff cf       	rjmp	.-2      	; 0x2ec <__stop_program>
