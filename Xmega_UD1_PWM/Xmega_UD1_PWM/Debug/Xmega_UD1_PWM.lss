
Xmega_UD1_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000514  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00000568  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00000598  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000431c  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000032cd  00000000  00000000  00004948  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000849  00000000  00000000  00007c15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00008460  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003064  00000000  00000000  000084e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ac  00000000  00000000  0000b548  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000b5f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
   8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
   c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  10:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  14:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  18:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  1c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  20:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  24:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  28:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  2c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  30:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  34:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  38:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  3c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  40:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  44:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  48:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  4c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  50:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  54:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  58:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  5c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  60:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  64:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  68:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  6c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  70:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  74:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  78:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  7c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  80:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  84:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  88:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  8c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  90:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  94:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  98:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  9c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  a0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  a4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  a8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  ac:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  b0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  b4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  b8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  bc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  c0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  c4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  c8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  cc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  d0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  d4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  d8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  dc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  e0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  e4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  e8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  ec:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  f0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  f4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  f8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  fc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 100:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 104:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 108:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 10c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 110:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 114:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 118:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 11c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 120:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 124:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 128:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 12c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 130:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 134:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 138:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 13c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 140:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 144:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 148:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 14c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 150:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 154:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 158:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 15c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 160:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 164:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 168:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 16c:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__vector_91>
 170:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 174:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 178:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 17c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 180:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 184:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 188:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 18c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 190:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 194:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 198:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 19c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1a0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1a4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1a8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1ac:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1b0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1b4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1b8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1bc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1c0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1c4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1c8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1cc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1d0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1d4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1d8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1dc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1e0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1e4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1e8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1ec:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1f0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1f4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1f8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	0e 94 69 02 	call	0x4d2	; 0x4d2 <main>
 210:	0c 94 88 02 	jmp	0x510	; 0x510 <_exit>

00000214 <__bad_interrupt>:
 214:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000218 <system_clocks_init>:
// System Clocks initialization
void system_clocks_init(void)
{
	unsigned char n,s;

	s=SREG;
 218:	9f b7       	in	r25, 0x3f	; 63
	
	OSC.XOSCCTRL=OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_XTAL_16KCLK_gc;
 21a:	e0 e5       	ldi	r30, 0x50	; 80
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	8b ec       	ldi	r24, 0xCB	; 203
 220:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL|=OSC_XOSCEN_bm;
 222:	80 81       	ld	r24, Z
 224:	88 60       	ori	r24, 0x08	; 8
 226:	80 83       	st	Z, r24

	while ((OSC.STATUS & OSC_XOSCRDY_bm)==0);
 228:	81 81       	ldd	r24, Z+1	; 0x01
 22a:	83 ff       	sbrs	r24, 3
 22c:	fd cf       	rjmp	.-6      	; 0x228 <system_clocks_init+0x10>

	n=(OSC.PLLCTRL & (~(OSC_PLLSRC_gm | OSC_PLLDIV_bm | OSC_PLLFAC_gm))) |
 22e:	e0 e5       	ldi	r30, 0x50	; 80
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	85 81       	ldd	r24, Z+5	; 0x05
	OSC_PLLSRC_XOSC_gc | (0<<OSC_PLLDIV_bp) | 2;
	CCP=CCP_IOREG_gc;
 234:	28 ed       	ldi	r18, 0xD8	; 216
 236:	24 bf       	out	0x34, r18	; 52
	OSC.PLLCTRL=n;
 238:	82 ec       	ldi	r24, 0xC2	; 194
 23a:	85 83       	std	Z+5, r24	; 0x05
	// Enable the PLL
	OSC.CTRL|=OSC_PLLEN_bm;
 23c:	80 81       	ld	r24, Z
 23e:	80 61       	ori	r24, 0x10	; 16
 240:	80 83       	st	Z, r24

	n=(CLK.PSCTRL & (~(CLK_PSADIV_gm | CLK_PSBCDIV1_bm | CLK_PSBCDIV0_bm))) |
 242:	e0 e4       	ldi	r30, 0x40	; 64
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	81 81       	ldd	r24, Z+1	; 0x01
 248:	80 78       	andi	r24, 0x80	; 128
	CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;
	CCP=CCP_IOREG_gc;
 24a:	24 bf       	out	0x34, r18	; 52
	CLK.PSCTRL=n;
 24c:	81 83       	std	Z+1, r24	; 0x01

	while ((OSC.STATUS & OSC_PLLRDY_bm)==0);
 24e:	e0 e5       	ldi	r30, 0x50	; 80
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	81 81       	ldd	r24, Z+1	; 0x01
 254:	84 ff       	sbrs	r24, 4
 256:	fd cf       	rjmp	.-6      	; 0x252 <system_clocks_init+0x3a>

	n=(CLK.CTRL & (~CLK_SCLKSEL_gm)) | CLK_SCLKSEL_PLL_gc;
 258:	e0 e4       	ldi	r30, 0x40	; 64
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	88 7f       	andi	r24, 0xF8	; 248
 260:	84 60       	ori	r24, 0x04	; 4
	CCP=CCP_IOREG_gc;
 262:	28 ed       	ldi	r18, 0xD8	; 216
 264:	24 bf       	out	0x34, r18	; 52
	CLK.CTRL=n;
 266:	80 83       	st	Z, r24
	
	OSC.CTRL&= ~(OSC_RC2MEN_bm | OSC_RC32MEN_bm | OSC_RC32KEN_bm);
 268:	e0 e5       	ldi	r30, 0x50	; 80
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	88 7f       	andi	r24, 0xF8	; 248
 270:	80 83       	st	Z, r24

	PORTCFG.CLKEVOUT&= ~(PORTCFG_CLKOUTSEL_gm | PORTCFG_CLKOUT_gm);
 272:	e0 eb       	ldi	r30, 0xB0	; 176
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	84 81       	ldd	r24, Z+4	; 0x04
 278:	80 7f       	andi	r24, 0xF0	; 240
 27a:	84 83       	std	Z+4, r24	; 0x04
	SREG=s;
 27c:	9f bf       	out	0x3f, r25	; 63
 27e:	08 95       	ret

00000280 <ports_init>:


// Ports initialization
void ports_init(void)
{
	PORTA.OUT=0x00;
 280:	e0 e0       	ldi	r30, 0x00	; 0
 282:	f6 e0       	ldi	r31, 0x06	; 6
 284:	14 82       	std	Z+4, r1	; 0x04
	PORTA.DIR=0xFF;//todo de salida
 286:	8f ef       	ldi	r24, 0xFF	; 255
 288:	80 83       	st	Z, r24
	PORTA.PIN0CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
 28a:	10 8a       	std	Z+16, r1	; 0x10
	PORTA.PIN1CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
 28c:	11 8a       	std	Z+17, r1	; 0x11
	PORTA.PIN2CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
 28e:	12 8a       	std	Z+18, r1	; 0x12
	PORTA.PIN3CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
 290:	13 8a       	std	Z+19, r1	; 0x13
	PORTA.PIN4CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
 292:	14 8a       	std	Z+20, r1	; 0x14
	PORTA.PIN5CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
 294:	15 8a       	std	Z+21, r1	; 0x15
	PORTA.PIN6CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
 296:	16 8a       	std	Z+22, r1	; 0x16
	PORTA.PIN7CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
 298:	17 8a       	std	Z+23, r1	; 0x17
	PORTA.INTCTRL=(PORTA.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |
 29a:	81 85       	ldd	r24, Z+9	; 0x09
 29c:	80 7f       	andi	r24, 0xF0	; 240
 29e:	81 87       	std	Z+9, r24	; 0x09
	PORT_INT1LVL_OFF_gc | PORT_INT0LVL_OFF_gc;
	PORTA.INT0MASK=0x00;
 2a0:	12 86       	std	Z+10, r1	; 0x0a
	PORTA.INT1MASK=0x00;
 2a2:	13 86       	std	Z+11, r1	; 0x0b
	
	PORTD.OUT=0x80;//Colocamos 
 2a4:	a0 e6       	ldi	r26, 0x60	; 96
 2a6:	b6 e0       	ldi	r27, 0x06	; 6
 2a8:	80 e8       	ldi	r24, 0x80	; 128
 2aa:	14 96       	adiw	r26, 0x04	; 4
 2ac:	8c 93       	st	X, r24
 2ae:	14 97       	sbiw	r26, 0x04	; 4
	PORTD.DIR=0x80;//tx salida
 2b0:	8c 93       	st	X, r24
	PORTD.PIN0CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
 2b2:	50 96       	adiw	r26, 0x10	; 16
 2b4:	1c 92       	st	X, r1
 2b6:	50 97       	sbiw	r26, 0x10	; 16
	PORTD.PIN1CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
 2b8:	51 96       	adiw	r26, 0x11	; 17
 2ba:	1c 92       	st	X, r1
 2bc:	51 97       	sbiw	r26, 0x11	; 17
	PORTD.PIN2CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
 2be:	52 96       	adiw	r26, 0x12	; 18
 2c0:	1c 92       	st	X, r1
 2c2:	52 97       	sbiw	r26, 0x12	; 18
	PORTD.PIN3CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
 2c4:	53 96       	adiw	r26, 0x13	; 19
 2c6:	1c 92       	st	X, r1
 2c8:	53 97       	sbiw	r26, 0x13	; 19
	PORTD.PIN4CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
 2ca:	54 96       	adiw	r26, 0x14	; 20
 2cc:	1c 92       	st	X, r1
 2ce:	54 97       	sbiw	r26, 0x14	; 20
	PORTD.PIN5CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
 2d0:	55 96       	adiw	r26, 0x15	; 21
 2d2:	1c 92       	st	X, r1
 2d4:	55 97       	sbiw	r26, 0x15	; 21
	PORTD.PIN6CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
 2d6:	56 96       	adiw	r26, 0x16	; 22
 2d8:	1c 92       	st	X, r1
 2da:	56 97       	sbiw	r26, 0x16	; 22
	PORTD.PIN7CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
 2dc:	57 96       	adiw	r26, 0x17	; 23
 2de:	1c 92       	st	X, r1
 2e0:	57 97       	sbiw	r26, 0x17	; 23
	PORTD.INTCTRL=(PORTD.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |
 2e2:	19 96       	adiw	r26, 0x09	; 9
 2e4:	8c 91       	ld	r24, X
 2e6:	19 97       	sbiw	r26, 0x09	; 9
 2e8:	80 7f       	andi	r24, 0xF0	; 240
 2ea:	19 96       	adiw	r26, 0x09	; 9
 2ec:	8c 93       	st	X, r24
 2ee:	19 97       	sbiw	r26, 0x09	; 9
	PORT_INT1LVL_OFF_gc | PORT_INT0LVL_OFF_gc;
	PORTD.INT0MASK=0x00;
 2f0:	1a 96       	adiw	r26, 0x0a	; 10
 2f2:	1c 92       	st	X, r1
 2f4:	1a 97       	sbiw	r26, 0x0a	; 10
	PORTD.INT1MASK=0x00;
 2f6:	1b 96       	adiw	r26, 0x0b	; 11
 2f8:	1c 92       	st	X, r1
	
	PORTC.OUT=0x00;
 2fa:	a0 e4       	ldi	r26, 0x40	; 64
 2fc:	b6 e0       	ldi	r27, 0x06	; 6
 2fe:	14 96       	adiw	r26, 0x04	; 4
 300:	1c 92       	st	X, r1
 302:	14 97       	sbiw	r26, 0x04	; 4
	PORTC.DIR=0x0F;
 304:	8f e0       	ldi	r24, 0x0F	; 15
 306:	8c 93       	st	X, r24
	PORTC.PIN0CTRL=PORT_OPC_TOTEM_gc;
 308:	50 96       	adiw	r26, 0x10	; 16
 30a:	1c 92       	st	X, r1
 30c:	50 97       	sbiw	r26, 0x10	; 16
	PORTC.PIN1CTRL=PORT_OPC_TOTEM_gc;
 30e:	51 96       	adiw	r26, 0x11	; 17
 310:	1c 92       	st	X, r1
 312:	51 97       	sbiw	r26, 0x11	; 17
	PORTC.PIN2CTRL=PORT_OPC_TOTEM_gc;
 314:	52 96       	adiw	r26, 0x12	; 18
 316:	1c 92       	st	X, r1
 318:	52 97       	sbiw	r26, 0x12	; 18
	PORTC.PIN3CTRL=PORT_OPC_TOTEM_gc;
 31a:	53 96       	adiw	r26, 0x13	; 19
 31c:	1c 92       	st	X, r1
 31e:	53 97       	sbiw	r26, 0x13	; 19
	PORTC.PIN4CTRL=PORT_OPC_TOTEM_gc;
 320:	54 96       	adiw	r26, 0x14	; 20
 322:	1c 92       	st	X, r1
 324:	54 97       	sbiw	r26, 0x14	; 20
	PORTC.PIN5CTRL=PORT_OPC_TOTEM_gc;
 326:	55 96       	adiw	r26, 0x15	; 21
 328:	1c 92       	st	X, r1
 32a:	55 97       	sbiw	r26, 0x15	; 21
	PORTC.PIN6CTRL=PORT_OPC_TOTEM_gc;
 32c:	56 96       	adiw	r26, 0x16	; 22
 32e:	1c 92       	st	X, r1
 330:	56 97       	sbiw	r26, 0x16	; 22
	PORTC.PIN7CTRL=PORT_OPC_TOTEM_gc;
 332:	57 96       	adiw	r26, 0x17	; 23
 334:	1c 92       	st	X, r1
 336:	57 97       	sbiw	r26, 0x17	; 23
	PORTC.INTCTRL=(PORTA.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |PORT_INT1LVL_OFF_gc | PORT_INT0LVL_OFF_gc;
 338:	81 85       	ldd	r24, Z+9	; 0x09
 33a:	80 7f       	andi	r24, 0xF0	; 240
 33c:	19 96       	adiw	r26, 0x09	; 9
 33e:	8c 93       	st	X, r24
 340:	19 97       	sbiw	r26, 0x09	; 9
	PORTC.INT0MASK=0x00;
 342:	1a 96       	adiw	r26, 0x0a	; 10
 344:	1c 92       	st	X, r1
 346:	1a 97       	sbiw	r26, 0x0a	; 10
	PORTC.INT1MASK=0x00;
 348:	1b 96       	adiw	r26, 0x0b	; 11
 34a:	1c 92       	st	X, r1
 34c:	08 95       	ret

0000034e <T0_init>:
}

//timer puerto c pwm
void T0_init(){
	unsigned  char n;
	n= SREG;
 34e:	2f b7       	in	r18, 0x3f	; 63
	TCC0.CTRLA = 0x00; //aseguramos que el timer esta detenido
 350:	e0 e0       	ldi	r30, 0x00	; 0
 352:	f8 e0       	ldi	r31, 0x08	; 8
 354:	10 82       	st	Z, r1
	TCC0.CTRLFSET =0b1100;//Reset timer
 356:	8c e0       	ldi	r24, 0x0C	; 12
 358:	81 87       	std	Z+9, r24	; 0x09
	TCC0.CTRLA = 0b0101;//Selecciona preescaler
 35a:	85 e0       	ldi	r24, 0x05	; 5
 35c:	80 83       	st	Z, r24
	//Habilitamos los canales A, B, C, D y Utilizamos PWM Single Slop = PWM rapido
	TCC0.CTRLB=(1<<TC0_CCDEN_bp)|(1<<TC0_CCCEN_bp)|(1<<TC0_CCBEN_bp)|(1<<TC0_CCAEN_bp)|(0<<TC0_WGMODE2_bp)|(1<<TC0_WGMODE1_bp)|(1<<TC0_WGMODE0_bp);
 35e:	83 ef       	ldi	r24, 0xF3	; 243
 360:	81 83       	std	Z+1, r24	; 0x01
	TCC0.CTRLD=0x00; //no habiloamos los eventos
 362:	13 82       	std	Z+3, r1	; 0x03
	TCC0.CTRLE=0x00;//configuramos el timer para funcionamiento de manera normal
 364:	14 82       	std	Z+4, r1	; 0x04
	TCC0.INTCTRLA=0x00;//no utilizamos interrupciones de desbordamiento ni de error
 366:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB=0x00; //no utilizamos interrupciones
 368:	17 82       	std	Z+7, r1	; 0x07
	HIRESC.CTRLA&=~HIRES_HREN0_bm;//no utilizamos
 36a:	a0 e9       	ldi	r26, 0x90	; 144
 36c:	b8 e0       	ldi	r27, 0x08	; 8
 36e:	8c 91       	ld	r24, X
 370:	8e 7f       	andi	r24, 0xFE	; 254
 372:	8c 93       	st	X, r24
	TCC0.INTFLAGS=TCC0.INTFLAGS;//limpiamos baderas de interrupciones
 374:	84 85       	ldd	r24, Z+12	; 0x0c
 376:	84 87       	std	Z+12, r24	; 0x0c
	TCC0.CNT=0x00;//inicializamos el contador en ceros
 378:	10 a2       	std	Z+32, r1	; 0x20
 37a:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.PER=9215;//configuramos nuestro TOP en 38 para una frecuencia de 750kHz
 37c:	8f ef       	ldi	r24, 0xFF	; 255
 37e:	93 e2       	ldi	r25, 0x23	; 35
 380:	86 a3       	std	Z+38, r24	; 0x26
 382:	97 a3       	std	Z+39, r25	; 0x27
	TCC0.CCA = 184;//2% del ciclo util
 384:	88 eb       	ldi	r24, 0xB8	; 184
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	80 a7       	std	Z+40, r24	; 0x28
 38a:	91 a7       	std	Z+41, r25	; 0x29
	TCC0.CCB = 184;//25
 38c:	82 a7       	std	Z+42, r24	; 0x2a
 38e:	93 a7       	std	Z+43, r25	; 0x2b
	TCC0.CCC = 184;//
 390:	84 a7       	std	Z+44, r24	; 0x2c
 392:	95 a7       	std	Z+45, r25	; 0x2d
	TCC0.CCD = 184;//
 394:	86 a7       	std	Z+46, r24	; 0x2e
 396:	97 a7       	std	Z+47, r25	; 0x2f
	
	SREG =n;
 398:	2f bf       	out	0x3f, r18	; 63
 39a:	08 95       	ret

0000039c <usartd1_init>:

// USARTD1 initialization
void usartd1_init(void)
{

	PORTD.OUTSET=0x80;//el pin tx debe estar en alto
 39c:	80 e8       	ldi	r24, 0x80	; 128
 39e:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
	
	//asicncrono
	//deshabilitamos paridad
	//utilizamos 8 bits de datos
	USARTD1.CTRLC=USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
 3a2:	e0 eb       	ldi	r30, 0xB0	; 176
 3a4:	f9 e0       	ldi	r31, 0x09	; 9
 3a6:	83 e0       	ldi	r24, 0x03	; 3
 3a8:	85 83       	std	Z+5, r24	; 0x05

	//habilitamos las interrupciones de recepcion de bajo nivel
	USARTD1.CTRLA=(USARTD1.CTRLA & (~(USART_RXCINTLVL_gm | USART_TXCINTLVL_gm | USART_DREINTLVL_gm))) |
 3aa:	83 81       	ldd	r24, Z+3	; 0x03
 3ac:	80 7c       	andi	r24, 0xC0	; 192
 3ae:	80 61       	ori	r24, 0x10	; 16
 3b0:	83 83       	std	Z+3, r24	; 0x03
	USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
	
	//configuramos el baud rate a 9600bps
	USARTD1.BAUDCTRLA=0xF0;
 3b2:	80 ef       	ldi	r24, 0xF0	; 240
 3b4:	86 83       	std	Z+6, r24	; 0x06
	USARTD1.BAUDCTRLB=((0x0C << USART_BSCALE_gp) & USART_BSCALE_gm) | 0x0B;
 3b6:	8b ec       	ldi	r24, 0xCB	; 203
 3b8:	87 83       	std	Z+7, r24	; 0x07
	
	//habilitamos el receptor, el transmisor y no utilizamos comunicacion multiprocesador ni doblamos la velocidad
	USARTD1.CTRLB=(USARTD1.CTRLB & (~(USART_RXEN_bm | USART_TXEN_bm | USART_CLK2X_bm | USART_MPCM_bm | USART_TXB8_bm))) |
 3ba:	84 81       	ldd	r24, Z+4	; 0x04
 3bc:	80 7e       	andi	r24, 0xE0	; 224
 3be:	88 61       	ori	r24, 0x18	; 24
 3c0:	84 83       	std	Z+4, r24	; 0x04
 3c2:	08 95       	ret

000003c4 <__vector_91>:


ISR(USARTD1_RXC_vect,ISR_NAKED)
{
	char data;
	data=USARTD1.DATA;
 3c4:	80 91 b0 09 	lds	r24, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
	
	switch (data)
 3c8:	82 36       	cpi	r24, 0x62	; 98
 3ca:	59 f0       	breq	.+22     	; 0x3e2 <__vector_91+0x1e>
 3cc:	83 36       	cpi	r24, 0x63	; 99
 3ce:	81 f0       	breq	.+32     	; 0x3f0 <__vector_91+0x2c>
 3d0:	81 36       	cpi	r24, 0x61	; 97
 3d2:	a9 f4       	brne	.+42     	; 0x3fe <__vector_91+0x3a>
	{
		case 'a': TCC0.CCA = 184; break; 
 3d4:	28 eb       	ldi	r18, 0xB8	; 184
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	20 93 28 08 	sts	0x0828, r18	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
 3dc:	30 93 29 08 	sts	0x0829, r19	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
 3e0:	2d c0       	rjmp	.+90     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		case 'b': TCC0.CCA = 461; break; 
 3e2:	2d ec       	ldi	r18, 0xCD	; 205
 3e4:	31 e0       	ldi	r19, 0x01	; 1
 3e6:	20 93 28 08 	sts	0x0828, r18	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
 3ea:	30 93 29 08 	sts	0x0829, r19	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
 3ee:	26 c0       	rjmp	.+76     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		case 'c': TCC0.CCA = 922; break;
 3f0:	2a e9       	ldi	r18, 0x9A	; 154
 3f2:	33 e0       	ldi	r19, 0x03	; 3
 3f4:	20 93 28 08 	sts	0x0828, r18	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
 3f8:	30 93 29 08 	sts	0x0829, r19	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
 3fc:	1f c0       	rjmp	.+62     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		/*
		
		*/
		
		default: TCC0.CCA = 0; break; 
 3fe:	10 92 28 08 	sts	0x0828, r1	; 0x800828 <__TEXT_REGION_LENGTH__+0x700828>
 402:	10 92 29 08 	sts	0x0829, r1	; 0x800829 <__TEXT_REGION_LENGTH__+0x700829>
	}
	
	switch(data){
 406:	85 36       	cpi	r24, 0x65	; 101
 408:	59 f0       	breq	.+22     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 40a:	86 36       	cpi	r24, 0x66	; 102
 40c:	81 f0       	breq	.+32     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 40e:	84 36       	cpi	r24, 0x64	; 100
 410:	a9 f4       	brne	.+42     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		case 'd': TCC0.CCB = 184; break;
 412:	28 eb       	ldi	r18, 0xB8	; 184
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	20 93 2a 08 	sts	0x082A, r18	; 0x80082a <__TEXT_REGION_LENGTH__+0x70082a>
 41a:	30 93 2b 08 	sts	0x082B, r19	; 0x80082b <__TEXT_REGION_LENGTH__+0x70082b>
 41e:	2d c0       	rjmp	.+90     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
		case 'e': TCC0.CCB = 461; break;
 420:	2d ec       	ldi	r18, 0xCD	; 205
 422:	31 e0       	ldi	r19, 0x01	; 1
 424:	20 93 2a 08 	sts	0x082A, r18	; 0x80082a <__TEXT_REGION_LENGTH__+0x70082a>
 428:	30 93 2b 08 	sts	0x082B, r19	; 0x80082b <__TEXT_REGION_LENGTH__+0x70082b>
 42c:	26 c0       	rjmp	.+76     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
		case 'f': TCC0.CCB = 922; break;
 42e:	2a e9       	ldi	r18, 0x9A	; 154
 430:	33 e0       	ldi	r19, 0x03	; 3
 432:	20 93 2a 08 	sts	0x082A, r18	; 0x80082a <__TEXT_REGION_LENGTH__+0x70082a>
 436:	30 93 2b 08 	sts	0x082B, r19	; 0x80082b <__TEXT_REGION_LENGTH__+0x70082b>
 43a:	1f c0       	rjmp	.+62     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
		default: TCC0.CCB = 0; break;
 43c:	10 92 2a 08 	sts	0x082A, r1	; 0x80082a <__TEXT_REGION_LENGTH__+0x70082a>
 440:	10 92 2b 08 	sts	0x082B, r1	; 0x80082b <__TEXT_REGION_LENGTH__+0x70082b>
		
	}
	
	switch(data){
 444:	88 36       	cpi	r24, 0x68	; 104
 446:	59 f0       	breq	.+22     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 448:	89 36       	cpi	r24, 0x69	; 105
 44a:	81 f0       	breq	.+32     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 44c:	87 36       	cpi	r24, 0x67	; 103
 44e:	a9 f4       	brne	.+42     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
		case 'g': TCC0.CCC = 184; break;
 450:	88 eb       	ldi	r24, 0xB8	; 184
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	80 93 2c 08 	sts	0x082C, r24	; 0x80082c <__TEXT_REGION_LENGTH__+0x70082c>
 458:	90 93 2d 08 	sts	0x082D, r25	; 0x80082d <__TEXT_REGION_LENGTH__+0x70082d>
 45c:	2d c0       	rjmp	.+90     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
		case 'h': TCC0.CCC = 461; break;
 45e:	8d ec       	ldi	r24, 0xCD	; 205
 460:	91 e0       	ldi	r25, 0x01	; 1
 462:	80 93 2c 08 	sts	0x082C, r24	; 0x80082c <__TEXT_REGION_LENGTH__+0x70082c>
 466:	90 93 2d 08 	sts	0x082D, r25	; 0x80082d <__TEXT_REGION_LENGTH__+0x70082d>
 46a:	26 c0       	rjmp	.+76     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
		case 'i': TCC0.CCC = 922; break;
 46c:	8a e9       	ldi	r24, 0x9A	; 154
 46e:	93 e0       	ldi	r25, 0x03	; 3
 470:	80 93 2c 08 	sts	0x082C, r24	; 0x80082c <__TEXT_REGION_LENGTH__+0x70082c>
 474:	90 93 2d 08 	sts	0x082D, r25	; 0x80082d <__TEXT_REGION_LENGTH__+0x70082d>
 478:	1f c0       	rjmp	.+62     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
		default:TCC0.CCC = 0; break;		
 47a:	10 92 2c 08 	sts	0x082C, r1	; 0x80082c <__TEXT_REGION_LENGTH__+0x70082c>
 47e:	10 92 2d 08 	sts	0x082D, r1	; 0x80082d <__TEXT_REGION_LENGTH__+0x70082d>
	}
	
	switch(data){
 482:	8b 36       	cpi	r24, 0x6B	; 107
 484:	59 f0       	breq	.+22     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 486:	8c 36       	cpi	r24, 0x6C	; 108
 488:	81 f0       	breq	.+32     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 48a:	8a 36       	cpi	r24, 0x6A	; 106
 48c:	a9 f4       	brne	.+42     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
		
		case 'j': TCC0.CCD = 184; break;
 48e:	88 eb       	ldi	r24, 0xB8	; 184
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	80 93 2e 08 	sts	0x082E, r24	; 0x80082e <__TEXT_REGION_LENGTH__+0x70082e>
 496:	90 93 2f 08 	sts	0x082F, r25	; 0x80082f <__TEXT_REGION_LENGTH__+0x70082f>
 49a:	12 c0       	rjmp	.+36     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
		case 'k': TCC0.CCD = 461; break;
 49c:	8d ec       	ldi	r24, 0xCD	; 205
 49e:	91 e0       	ldi	r25, 0x01	; 1
 4a0:	80 93 2e 08 	sts	0x082E, r24	; 0x80082e <__TEXT_REGION_LENGTH__+0x70082e>
 4a4:	90 93 2f 08 	sts	0x082F, r25	; 0x80082f <__TEXT_REGION_LENGTH__+0x70082f>
 4a8:	0b c0       	rjmp	.+22     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
		case 'l': TCC0.CCD = 922; break;
 4aa:	8a e9       	ldi	r24, 0x9A	; 154
 4ac:	93 e0       	ldi	r25, 0x03	; 3
 4ae:	80 93 2e 08 	sts	0x082E, r24	; 0x80082e <__TEXT_REGION_LENGTH__+0x70082e>
 4b2:	90 93 2f 08 	sts	0x082F, r25	; 0x80082f <__TEXT_REGION_LENGTH__+0x70082f>
 4b6:	04 c0       	rjmp	.+8      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
		default : TCC0.CCD = 0; break;
 4b8:	10 92 2e 08 	sts	0x082E, r1	; 0x80082e <__TEXT_REGION_LENGTH__+0x70082e>
 4bc:	10 92 2f 08 	sts	0x082F, r1	; 0x80082f <__TEXT_REGION_LENGTH__+0x70082f>
		
	}
	
	
	reti();
 4c0:	18 95       	reti

000004c2 <putchar_usartd1>:
}


void putchar_usartd1(char c)//funcion para enviar datos seriales
{
	while ((USARTD1.STATUS & USART_DREIF_bm) == 0);
 4c2:	e0 eb       	ldi	r30, 0xB0	; 176
 4c4:	f9 e0       	ldi	r31, 0x09	; 9
 4c6:	91 81       	ldd	r25, Z+1	; 0x01
 4c8:	95 ff       	sbrs	r25, 5
 4ca:	fd cf       	rjmp	.-6      	; 0x4c6 <putchar_usartd1+0x4>
	USARTD1.DATA=c;
 4cc:	80 93 b0 09 	sts	0x09B0, r24	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
 4d0:	08 95       	ret

000004d2 <main>:

int main(void)
{
	unsigned char n;

	n=(PMIC.CTRL & (~(PMIC_RREN_bm | PMIC_IVSEL_bm | PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm))) |	PMIC_LOLVLEN_bm;
 4d2:	e0 ea       	ldi	r30, 0xA0	; 160
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	82 81       	ldd	r24, Z+2	; 0x02
 4d8:	88 73       	andi	r24, 0x38	; 56
 4da:	81 60       	ori	r24, 0x01	; 1
	CCP=CCP_IOREG_gc;
 4dc:	98 ed       	ldi	r25, 0xD8	; 216
 4de:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL=n;
 4e0:	82 83       	std	Z+2, r24	; 0x02
	
	PMIC.INTPRI=0x00;
 4e2:	11 82       	std	Z+1, r1	; 0x01
	
	T0_init();
 4e4:	0e 94 a7 01 	call	0x34e	; 0x34e <T0_init>
	
	
	system_clocks_init();//habilitamos los relojes dek mcu
 4e8:	0e 94 0c 01 	call	0x218	; 0x218 <system_clocks_init>

	ports_init(); //inicializamos los puertos
 4ec:	0e 94 40 01 	call	0x280	; 0x280 <ports_init>

	usartd1_init();//inicializamos puerto serial
 4f0:	0e 94 ce 01 	call	0x39c	; 0x39c <usartd1_init>
	
	
	sei();
 4f4:	78 94       	sei
	
	while (1)
	{
		putchar_usartd1('a');//enviamos el caracter 'a' cada 300ms
 4f6:	81 e6       	ldi	r24, 0x61	; 97
 4f8:	0e 94 61 02 	call	0x4c2	; 0x4c2 <putchar_usartd1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4fc:	2f ef       	ldi	r18, 0xFF	; 255
 4fe:	8f ef       	ldi	r24, 0xFF	; 255
 500:	9a e1       	ldi	r25, 0x1A	; 26
 502:	21 50       	subi	r18, 0x01	; 1
 504:	80 40       	sbci	r24, 0x00	; 0
 506:	90 40       	sbci	r25, 0x00	; 0
 508:	e1 f7       	brne	.-8      	; 0x502 <main+0x30>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <main+0x3a>
 50c:	00 00       	nop
 50e:	f3 cf       	rjmp	.-26     	; 0x4f6 <main+0x24>

00000510 <_exit>:
 510:	f8 94       	cli

00000512 <__stop_program>:
 512:	ff cf       	rjmp	.-2      	; 0x512 <__stop_program>
