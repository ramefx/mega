
Xmega_06_Serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000034e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000003a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003b5a  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000031f0  00000000  00000000  00003fba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006a0  00000000  00000000  000071aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  0000784c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002ae9  00000000  00000000  000078c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000062  00000000  00000000  0000a3a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000a40b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
   8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
   c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  10:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  14:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  18:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  1c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  20:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  24:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  28:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  2c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  30:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  34:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  38:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  3c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  40:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  44:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  48:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  4c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  50:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  54:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  58:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  5c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  60:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  64:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  68:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  6c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  70:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  74:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  78:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  7c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  80:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  84:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  88:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  8c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  90:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  94:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  98:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  9c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  a0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  a4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  a8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  ac:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  b0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  b4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  b8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  bc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  c0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  c4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  c8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  cc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  d0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  d4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  d8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  dc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  e0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  e4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  e8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  ec:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  f0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  f4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  f8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  fc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 100:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 104:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 108:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 10c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 110:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 114:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 118:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 11c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 120:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 124:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 128:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 12c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 130:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 134:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 138:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 13c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 140:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 144:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 148:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 14c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 150:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 154:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 158:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 15c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 160:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__vector_88>
 164:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 168:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 16c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 170:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 174:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 178:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 17c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 180:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 184:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 188:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 18c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 190:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 194:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 198:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 19c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1a0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1a4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1a8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1ac:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1b0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1b4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1b8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1bc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1c0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1c4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1c8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1cc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1d0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1d4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1d8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1dc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1e0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1e4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1e8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1ec:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1f0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1f4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1f8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	0e 94 92 01 	call	0x324	; 0x324 <main>
 210:	0c 94 a5 01 	jmp	0x34a	; 0x34a <_exit>

00000214 <__bad_interrupt>:
 214:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000218 <system_clocks_init>:
// System Clocks initialization
void system_clocks_init(void)
{
	unsigned char n,s;

	s=SREG;
 218:	9f b7       	in	r25, 0x3f	; 63
	OSC.XOSCCTRL=OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_XTAL_16KCLK_gc;
 21a:	e0 e5       	ldi	r30, 0x50	; 80
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	8b ec       	ldi	r24, 0xCB	; 203
 220:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL|=OSC_XOSCEN_bm;
 222:	80 81       	ld	r24, Z
 224:	88 60       	ori	r24, 0x08	; 8
 226:	80 83       	st	Z, r24

	while ((OSC.STATUS & OSC_XOSCRDY_bm)==0);
 228:	81 81       	ldd	r24, Z+1	; 0x01
 22a:	83 ff       	sbrs	r24, 3
 22c:	fd cf       	rjmp	.-6      	; 0x228 <system_clocks_init+0x10>

	n=(OSC.PLLCTRL & (~(OSC_PLLSRC_gm | OSC_PLLDIV_bm | OSC_PLLFAC_gm))) |
 22e:	e0 e5       	ldi	r30, 0x50	; 80
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	85 81       	ldd	r24, Z+5	; 0x05
	OSC_PLLSRC_XOSC_gc | (0<<OSC_PLLDIV_bp) | 2;
	CCP=CCP_IOREG_gc;
 234:	28 ed       	ldi	r18, 0xD8	; 216
 236:	24 bf       	out	0x34, r18	; 52
	OSC.PLLCTRL=n;
 238:	82 ec       	ldi	r24, 0xC2	; 194
 23a:	85 83       	std	Z+5, r24	; 0x05

	OSC.CTRL|=OSC_PLLEN_bm;
 23c:	80 81       	ld	r24, Z
 23e:	80 61       	ori	r24, 0x10	; 16
 240:	80 83       	st	Z, r24

	n=(CLK.PSCTRL & (~(CLK_PSADIV_gm | CLK_PSBCDIV1_bm | CLK_PSBCDIV0_bm))) |
 242:	e0 e4       	ldi	r30, 0x40	; 64
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	81 81       	ldd	r24, Z+1	; 0x01
 248:	80 78       	andi	r24, 0x80	; 128
	CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;
	CCP=CCP_IOREG_gc;
 24a:	24 bf       	out	0x34, r18	; 52
	CLK.PSCTRL=n;
 24c:	81 83       	std	Z+1, r24	; 0x01

	while ((OSC.STATUS & OSC_PLLRDY_bm)==0);
 24e:	e0 e5       	ldi	r30, 0x50	; 80
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	81 81       	ldd	r24, Z+1	; 0x01
 254:	84 ff       	sbrs	r24, 4
 256:	fd cf       	rjmp	.-6      	; 0x252 <system_clocks_init+0x3a>

	n=(CLK.CTRL & (~CLK_SCLKSEL_gm)) | CLK_SCLKSEL_PLL_gc;
 258:	e0 e4       	ldi	r30, 0x40	; 64
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	88 7f       	andi	r24, 0xF8	; 248
 260:	84 60       	ori	r24, 0x04	; 4
	CCP=CCP_IOREG_gc;
 262:	28 ed       	ldi	r18, 0xD8	; 216
 264:	24 bf       	out	0x34, r18	; 52
	CLK.CTRL=n;
 266:	80 83       	st	Z, r24

	OSC.CTRL&= ~(OSC_RC2MEN_bm | OSC_RC32MEN_bm | OSC_RC32KEN_bm);
 268:	e0 e5       	ldi	r30, 0x50	; 80
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	88 7f       	andi	r24, 0xF8	; 248
 270:	80 83       	st	Z, r24

	PORTCFG.CLKEVOUT&= ~(PORTCFG_CLKOUTSEL_gm | PORTCFG_CLKOUT_gm);
 272:	e0 eb       	ldi	r30, 0xB0	; 176
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	84 81       	ldd	r24, Z+4	; 0x04
 278:	80 7f       	andi	r24, 0xF0	; 240
 27a:	84 83       	std	Z+4, r24	; 0x04

	SREG=s;
 27c:	9f bf       	out	0x3f, r25	; 63
 27e:	08 95       	ret

00000280 <ports_init>:
}


void ports_init(void)
{
	PORTA.OUT=0x00;
 280:	e0 e0       	ldi	r30, 0x00	; 0
 282:	f6 e0       	ldi	r31, 0x06	; 6
 284:	14 82       	std	Z+4, r1	; 0x04
	PORTA.DIR=0xFF;//direccionado de salida
 286:	8f ef       	ldi	r24, 0xFF	; 255
 288:	80 83       	st	Z, r24
	PORTA.PIN0CTRL=PORT_OPC_TOTEM_gc;
 28a:	10 8a       	std	Z+16, r1	; 0x10
	PORTA.PIN1CTRL=PORT_OPC_TOTEM_gc;
 28c:	11 8a       	std	Z+17, r1	; 0x11
	PORTA.PIN2CTRL=PORT_OPC_TOTEM_gc;
 28e:	12 8a       	std	Z+18, r1	; 0x12
	PORTA.PIN3CTRL=PORT_OPC_TOTEM_gc;
 290:	13 8a       	std	Z+19, r1	; 0x13
	PORTA.PIN4CTRL=PORT_OPC_TOTEM_gc;
 292:	14 8a       	std	Z+20, r1	; 0x14
	PORTA.PIN5CTRL=PORT_OPC_TOTEM_gc;
 294:	15 8a       	std	Z+21, r1	; 0x15
	PORTA.PIN6CTRL=PORT_OPC_TOTEM_gc;
 296:	16 8a       	std	Z+22, r1	; 0x16
	PORTA.PIN7CTRL=PORT_OPC_TOTEM_gc;
 298:	17 8a       	std	Z+23, r1	; 0x17
	PORTA.INTCTRL=(PORTA.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |PORT_INT1LVL_OFF_gc | PORT_INT0LVL_OFF_gc;
 29a:	81 85       	ldd	r24, Z+9	; 0x09
 29c:	80 7f       	andi	r24, 0xF0	; 240
 29e:	81 87       	std	Z+9, r24	; 0x09
	PORTA.INT0MASK=0x00;
 2a0:	12 86       	std	Z+10, r1	; 0x0a
	PORTA.INT1MASK=0x00;
 2a2:	13 86       	std	Z+11, r1	; 0x0b
 2a4:	08 95       	ret

000002a6 <portD_init>:

}
void portD_init(void)
{
	PORTD.OUT=0x00;
 2a6:	e0 e6       	ldi	r30, 0x60	; 96
 2a8:	f6 e0       	ldi	r31, 0x06	; 6
 2aa:	14 82       	std	Z+4, r1	; 0x04
	PORTD.DIR=0x08;//configuramos como salida Tx y entrada Rx
 2ac:	88 e0       	ldi	r24, 0x08	; 8
 2ae:	80 83       	st	Z, r24
	PORTD.PIN0CTRL=PORT_OPC_TOTEM_gc;
 2b0:	10 8a       	std	Z+16, r1	; 0x10
	PORTD.PIN1CTRL=PORT_OPC_TOTEM_gc;
 2b2:	11 8a       	std	Z+17, r1	; 0x11
	PORTD.PIN2CTRL=PORT_OPC_TOTEM_gc|PORT_ISC_BOTHEDGES_gc;//declaramos la entrada
 2b4:	12 8a       	std	Z+18, r1	; 0x12
	PORTD.PIN3CTRL=PORT_OPC_TOTEM_gc;
 2b6:	13 8a       	std	Z+19, r1	; 0x13
	PORTD.PIN4CTRL=PORT_OPC_TOTEM_gc;
 2b8:	14 8a       	std	Z+20, r1	; 0x14
	PORTD.PIN5CTRL=PORT_OPC_TOTEM_gc;
 2ba:	15 8a       	std	Z+21, r1	; 0x15
	PORTD.PIN6CTRL=PORT_OPC_TOTEM_gc;
 2bc:	16 8a       	std	Z+22, r1	; 0x16
	PORTD.PIN7CTRL=PORT_OPC_TOTEM_gc;
 2be:	17 8a       	std	Z+23, r1	; 0x17
	PORTD.INTCTRL=(PORTA.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |PORT_INT1LVL_OFF_gc | PORT_INT0LVL_OFF_gc;
 2c0:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <__TEXT_REGION_LENGTH__+0x700609>
 2c4:	80 7f       	andi	r24, 0xF0	; 240
 2c6:	81 87       	std	Z+9, r24	; 0x09
	PORTD.INT0MASK=0x00;
 2c8:	12 86       	std	Z+10, r1	; 0x0a
	PORTD.INT1MASK=0x00;
 2ca:	13 86       	std	Z+11, r1	; 0x0b
 2cc:	08 95       	ret

000002ce <USART0_init>:

}
void USART0_init(){
	PORTD.OUTSET=0x08;//mandando en alto el pin Tx
 2ce:	88 e0       	ldi	r24, 0x08	; 8
 2d0:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
	//configuramos usartd0 como asincrono sin paridad un bit de stop y 8 bits de datos
	USARTD0.CTRLC=(0<<USART_CMODE1_bp)|(0<<USART_PMODE1_bp)|(0<<USART_PMODE0_bp)|(0<<USART_SBMODE_bp)|(0<<USART_CHSIZE2_bp)|(1<<USART_CHSIZE1_bp)|(1<<USART_CHSIZE0_bp);
 2d4:	e0 ea       	ldi	r30, 0xA0	; 160
 2d6:	f9 e0       	ldi	r31, 0x09	; 9
 2d8:	83 e0       	ldi	r24, 0x03	; 3
 2da:	85 83       	std	Z+5, r24	; 0x05
	//habilitamos la interruocio de recepcion de datos con prioridad baja 
	USARTD0.CTRLA=(0<<USART_RXCINTLVL1_bp)|(1<<USART_RXCINTLVL0_bp)|(0<<USART_TXCINTLVL1_bp)|(0<<USART_TXCINTLVL0_bp)|(0<<USART_DREINTLVL1_bp)|(0<<USART_DREINTLVL0_bp);
 2dc:	80 e1       	ldi	r24, 0x10	; 16
 2de:	83 83       	std	Z+3, r24	; 0x03
	//configurar el baud rate 9600
	USARTD0.BAUDCTRLA=0xF0;
 2e0:	80 ef       	ldi	r24, 0xF0	; 240
 2e2:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB=0x0B;
 2e4:	8b e0       	ldi	r24, 0x0B	; 11
 2e6:	87 83       	std	Z+7, r24	; 0x07
	//habilitamos el receptor Rx el Tx sin multiplicador de frecuencia 2, no utiliamos comunicacion multiprocesador, no utilizar 9 bits de datos
	USARTD0.CTRLB=(1<<USART_RXEN_bp)|(1<<USART_TXEN_bp)|(0<<USART_CLK2X_bp)|(0<<USART_MPCM_bp)|(0<<USART_TXB8_bp);
 2e8:	88 e1       	ldi	r24, 0x18	; 24
 2ea:	84 83       	std	Z+4, r24	; 0x04
 2ec:	08 95       	ret

000002ee <__vector_88>:
	
}

ISR(USARTD0_RXC_vect,ISR_NAKED){
	char dato;
	dato=USARTD0.DATA;//guardamos en dato el valor recibido
 2ee:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
	
	switch(dato)
 2f2:	81 36       	cpi	r24, 0x61	; 97
 2f4:	29 f0       	breq	.+10     	; 0x300 <__vector_88+0x12>
 2f6:	85 36       	cpi	r24, 0x65	; 101
 2f8:	39 f0       	breq	.+14     	; 0x308 <__vector_88+0x1a>
 2fa:	82 33       	cpi	r24, 0x32	; 50
 2fc:	69 f4       	brne	.+26     	; 0x318 <__vector_88+0x2a>
 2fe:	08 c0       	rjmp	.+16     	; 0x310 <__vector_88+0x22>
	{
	case 'a':PORTA.OUT = 0x01; break;
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	90 93 04 06 	sts	0x0604, r25	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
 306:	0b c0       	rjmp	.+22     	; 0x31e <__vector_88+0x30>
	case 'e':PORTA.OUT = 0x02; break;
 308:	92 e0       	ldi	r25, 0x02	; 2
 30a:	90 93 04 06 	sts	0x0604, r25	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
 30e:	07 c0       	rjmp	.+14     	; 0x31e <__vector_88+0x30>
	case '2':PORTA.OUT = 0x04; break;
 310:	94 e0       	ldi	r25, 0x04	; 4
 312:	90 93 04 06 	sts	0x0604, r25	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
 316:	03 c0       	rjmp	.+6      	; 0x31e <__vector_88+0x30>

	default:PORTA.OUT = 0x08; break;
 318:	98 e0       	ldi	r25, 0x08	; 8
 31a:	90 93 04 06 	sts	0x0604, r25	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>

	}
	USARTD0.DATA = dato;
 31e:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
	
	
	reti();//regreso de la interrupcion y limpia banderas
 322:	18 95       	reti

00000324 <main>:
}*/
int main(void)
{
	unsigned char	p;
	//habilitamos interrupciones de bajo nivel
	p=(PMIC.CTRL & (~(PMIC_RREN_bm|PMIC_IVSEL_bm|PMIC_HILVLEN_bm|PMIC_MEDLVLEN_bm|PMIC_LOLVLEN_bm)))|PMIC_LOLVLEN_bm;
 324:	e0 ea       	ldi	r30, 0xA0	; 160
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	82 81       	ldd	r24, Z+2	; 0x02
 32a:	88 73       	andi	r24, 0x38	; 56
 32c:	81 60       	ori	r24, 0x01	; 1
	CCP=CCP_IOREG_gc;
 32e:	98 ed       	ldi	r25, 0xD8	; 216
 330:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL=p;
 332:	82 83       	std	Z+2, r24	; 0x02
	
	PMIC.INTPRI=0x00;
 334:	11 82       	std	Z+1, r1	; 0x01
	
	system_clocks_init();
 336:	0e 94 0c 01 	call	0x218	; 0x218 <system_clocks_init>

	ports_init();
 33a:	0e 94 40 01 	call	0x280	; 0x280 <ports_init>
	portD_init();
 33e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <portD_init>
	USART0_init();
 342:	0e 94 67 01 	call	0x2ce	; 0x2ce <USART0_init>
	sei();
 346:	78 94       	sei
	//T0D_init();
	
	while (1)
	{

	}
 348:	ff cf       	rjmp	.-2      	; 0x348 <main+0x24>

0000034a <_exit>:
 34a:	f8 94       	cli

0000034c <__stop_program>:
 34c:	ff cf       	rjmp	.-2      	; 0x34c <__stop_program>
