
P03_1_LedMatrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000130  000001c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000130  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010a  0080010a  000001ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000761  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000069a  00000000  00000000  000009c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000298  00000000  00000000  0000105b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000012f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ad  00000000  00000000  00001318  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000016c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e3       	ldi	r30, 0x30	; 48
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 96 00 	jmp	0x12c	; 0x12c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
int contador=0;
int i,j;

int main(void)
{
	DDRD=0xFF;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	8a b9       	out	0x0a, r24	; 10
	DDRC=0xFF;
  aa:	87 b9       	out	0x07, r24	; 7
	PORTC=0x10;
  ac:	80 e1       	ldi	r24, 0x10	; 16
  ae:	88 b9       	out	0x08, r24	; 8
	while(1){
		for(j=0;j<10000000000000;j++){ //Ciclo de numero de barridos
  b0:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <j+0x1>
  b4:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <j>
			for(i=0;i<5;i++){ //Ciclo de barrido de columnas
				PORTD=numero[contador][i]; //Se le asigna al PORTD el código respecto a la columna
				_delay_ms(1);
				PORTC=PORTC>>1; //Siguiente columna
			}
			PORTC=0x10; //Se inicializa a las primera columna
  b8:	40 e1       	ldi	r20, 0x10	; 16
	DDRD=0xFF;
	DDRC=0xFF;
	PORTC=0x10;
	while(1){
		for(j=0;j<10000000000000;j++){ //Ciclo de numero de barridos
			for(i=0;i<5;i++){ //Ciclo de barrido de columnas
  ba:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <i+0x1>
  be:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <i>
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
				PORTD=numero[contador][i]; //Se le asigna al PORTD el código respecto a la columna
  c6:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
  ca:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <__data_end+0x1>
  ce:	9f 01       	movw	r18, r30
  d0:	22 0f       	add	r18, r18
  d2:	33 1f       	adc	r19, r19
  d4:	22 0f       	add	r18, r18
  d6:	33 1f       	adc	r19, r19
  d8:	e2 0f       	add	r30, r18
  da:	f3 1f       	adc	r31, r19
  dc:	e8 0f       	add	r30, r24
  de:	f9 1f       	adc	r31, r25
  e0:	ee 0f       	add	r30, r30
  e2:	ff 1f       	adc	r31, r31
  e4:	e0 50       	subi	r30, 0x00	; 0
  e6:	ff 4f       	sbci	r31, 0xFF	; 255
  e8:	80 81       	ld	r24, Z
  ea:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	89 ef       	ldi	r24, 0xF9	; 249
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x4a>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x50>
  f6:	00 00       	nop
				_delay_ms(1);
				PORTC=PORTC>>1; //Siguiente columna
  f8:	88 b1       	in	r24, 0x08	; 8
  fa:	86 95       	lsr	r24
  fc:	88 b9       	out	0x08, r24	; 8
	DDRD=0xFF;
	DDRC=0xFF;
	PORTC=0x10;
	while(1){
		for(j=0;j<10000000000000;j++){ //Ciclo de numero de barridos
			for(i=0;i<5;i++){ //Ciclo de barrido de columnas
  fe:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <i>
 102:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <i+0x1>
 106:	01 96       	adiw	r24, 0x01	; 1
 108:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <i+0x1>
 10c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <i>
 110:	85 30       	cpi	r24, 0x05	; 5
 112:	91 05       	cpc	r25, r1
 114:	c4 f2       	brlt	.-80     	; 0xc6 <main+0x20>
				PORTD=numero[contador][i]; //Se le asigna al PORTD el código respecto a la columna
				_delay_ms(1);
				PORTC=PORTC>>1; //Siguiente columna
			}
			PORTC=0x10; //Se inicializa a las primera columna
 116:	48 b9       	out	0x08, r20	; 8
{
	DDRD=0xFF;
	DDRC=0xFF;
	PORTC=0x10;
	while(1){
		for(j=0;j<10000000000000;j++){ //Ciclo de numero de barridos
 118:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <j>
 11c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <j+0x1>
 120:	01 96       	adiw	r24, 0x01	; 1
 122:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <j+0x1>
 126:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <j>
				PORTD=numero[contador][i]; //Se le asigna al PORTD el código respecto a la columna
				_delay_ms(1);
				PORTC=PORTC>>1; //Siguiente columna
			}
			PORTC=0x10; //Se inicializa a las primera columna
		}
 12a:	c7 cf       	rjmp	.-114    	; 0xba <main+0x14>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
