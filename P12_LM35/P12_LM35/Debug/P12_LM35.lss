
P12_LM35.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000142  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ee  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d9  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000062e  00000000  00000000  000008c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027a  00000000  00000000  00000ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001170  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000366  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  0000152a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__vector_21>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6f 00 	call	0xde	; 0xde <main>
  78:	0c 94 75 00 	jmp	0xea	; 0xea <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <conf_puertos>:
#include <avr/io.h>
#include <avr/interrupt.h>

void conf_puertos(){
	
	DDRD = 0xFF; //salidas 0b11111111
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF; //salidas en uno 0b101000
  84:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x00;//configuracion de entrada
  86:	17 b8       	out	0x07, r1	; 7
  88:	08 95       	ret

0000008a <conf_adc>:
	
}

void conf_adc(){
	//------|referencia 1.1 vref |ladoiz-der|sedeccionar canal de adc--------ADC1--|
	ADMUX = (1<<REFS1)|(1<<REFS0)|(0<<ADLAR)|(0<<MUX3)|(0<<MUX2)|(0<<MUX1)|(1<<MUX0);
  8a:	81 ec       	ldi	r24, 0xC1	; 193
  8c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	//------habilitmaos analogio ------------------------------|precalador de 128 
	ADCSRA = (1<<ADEN)|(1<<ADSC)|(1<<ADATE)|(0<<ADIF)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);//habilitamos interrupcion de adc habilitamos prescaler 128
  90:	8f ee       	ldi	r24, 0xEF	; 239
  92:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	/*configurar fuente de disparo--------- */
	ADCSRB = (0<<ADTS2)|(0<<ADTS1)|(0<<ADTS0);//ACME coparador analogico registro no se usa
  96:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	DIDR0 = (0<<ADC5D)|(0<<ADC4D)|(0<<ADC3D)|(0<<ADC2D)|(0<<ADC1D)|(0<<ADC0D);
  9a:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
  9e:	08 95       	ret

000000a0 <__vector_21>:
}

ISR(ADC_vect,ISR_NAKED){
	//PORTD = ADCL;
	//PORTB = ADCH;
	if (ADC>=251 && ADC<344)
  a0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  a4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  a8:	8b 3f       	cpi	r24, 0xFB	; 251
  aa:	91 05       	cpc	r25, r1
  ac:	58 f0       	brcs	.+22     	; 0xc4 <__vector_21+0x24>
  ae:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  b2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  b6:	88 35       	cpi	r24, 0x58	; 88
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	92 07       	cpc	r25, r18
  bc:	18 f4       	brcc	.+6      	; 0xc4 <__vector_21+0x24>
	{
		PORTD=0b001000;
  be:	88 e0       	ldi	r24, 0x08	; 8
  c0:	8b b9       	out	0x0b, r24	; 11
  c2:	0c c0       	rjmp	.+24     	; 0xdc <__vector_21+0x3c>
	} 
	
	else if (ADC>=344)
  c4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  c8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  cc:	88 35       	cpi	r24, 0x58	; 88
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	92 07       	cpc	r25, r18
  d2:	18 f0       	brcs	.+6      	; 0xda <__vector_21+0x3a>
	{
		PORTD=0b100000;
  d4:	80 e2       	ldi	r24, 0x20	; 32
  d6:	8b b9       	out	0x0b, r24	; 11
  d8:	01 c0       	rjmp	.+2      	; 0xdc <__vector_21+0x3c>
	}
	else
	{
		PORTB=0b000000;
  da:	15 b8       	out	0x05, r1	; 5
	else if
	(condición) { extracto; }
	else{ extracto; }*/
	//PORTD = (ADC & 0xFF);//los 8 bits en la parte baja o menos significativa (ADC & 0xff)descarta los 2 bits mas significativos
	//PORTB = ADC>>8;//los 2 bits en la parte alta o mas significativa [mover los mas significaitivos a menos sig con corrimieto a la dercha (ADC>>8)
	reti();
  dc:	18 95       	reti

000000de <main>:
	
}
int main(void)
{
	conf_puertos();
  de:	0e 94 40 00 	call	0x80	; 0x80 <conf_puertos>
	conf_adc();
  e2:	0e 94 45 00 	call	0x8a	; 0x8a <conf_adc>
	sei();
  e6:	78 94       	sei
    /* Replace with your application code */
    while (1) 
    {
    }
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <main+0xa>

000000ea <_exit>:
  ea:	f8 94       	cli

000000ec <__stop_program>:
  ec:	ff cf       	rjmp	.-2      	; 0xec <__stop_program>
