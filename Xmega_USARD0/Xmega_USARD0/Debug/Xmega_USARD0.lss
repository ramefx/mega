
Xmega_USARD0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000043e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000043e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00000470  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003ce1  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003271  00000000  00000000  000041dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000073c  00000000  00000000  0000744e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00007b8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002dbc  00000000  00000000  00007c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008b  00000000  00000000  0000a9bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000aa47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__ctors_end>
   4:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
   8:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
   c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  10:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  14:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  18:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  1c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  20:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  24:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  28:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  2c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  30:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  34:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  38:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  3c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  40:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  44:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  48:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  4c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  50:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  54:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  58:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  5c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  60:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  64:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  68:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  6c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  70:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  74:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  78:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  7c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  80:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  84:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  88:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  8c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  90:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  94:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  98:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  9c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  a0:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  a4:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  a8:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  ac:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  b0:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  b4:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  b8:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  bc:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  c0:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  c4:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  c8:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  cc:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  d0:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  d4:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  d8:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  dc:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  e0:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  e4:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  e8:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  ec:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  f0:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  f4:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  f8:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  fc:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 100:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 104:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 108:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 10c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 110:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 114:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 118:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 11c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 120:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 124:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 128:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 12c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 130:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 134:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 138:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 13c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 140:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 144:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 148:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 14c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 150:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 154:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 158:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 15c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 160:	0c 94 91 01 	jmp	0x322	; 0x322 <__vector_88>
 164:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 168:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 16c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 170:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 174:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 178:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 17c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 180:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 184:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 188:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 18c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 190:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 194:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 198:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 19c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 1a0:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 1a4:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 1a8:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 1ac:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 1b0:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 1b4:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 1b8:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 1bc:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 1c0:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 1c4:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 1c8:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 1cc:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 1d0:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 1d4:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 1d8:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 1dc:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 1e0:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 1e4:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 1e8:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 1ec:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 1f0:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 1f4:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 1f8:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
 1fc:	a3 01       	movw	r20, r6
 1fe:	a7 01       	movw	r20, r14
 200:	ab 01       	movw	r20, r22
 202:	af 01       	movw	r20, r30
 204:	b3 01       	movw	r22, r6
 206:	b7 01       	movw	r22, r14
 208:	bb 01       	movw	r22, r22
 20a:	bf 01       	movw	r22, r30

0000020c <__trampolines_start>:
 20c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__vector_88+0x2c>
 210:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__vector_88+0x5c>
 214:	0c 94 a3 01 	jmp	0x346	; 0x346 <__vector_88+0x24>
 218:	0c 94 b7 01 	jmp	0x36e	; 0x36e <__vector_88+0x4c>
 21c:	0c 94 bb 01 	jmp	0x376	; 0x376 <__vector_88+0x54>
 220:	0c 94 ab 01 	jmp	0x356	; 0x356 <__vector_88+0x34>
 224:	0c 94 b3 01 	jmp	0x366	; 0x366 <__vector_88+0x44>
 228:	0c 94 af 01 	jmp	0x35e	; 0x35e <__vector_88+0x3c>

0000022c <__ctors_end>:
 22c:	11 24       	eor	r1, r1
 22e:	1f be       	out	0x3f, r1	; 63
 230:	cf ef       	ldi	r28, 0xFF	; 255
 232:	cd bf       	out	0x3d, r28	; 61
 234:	df e5       	ldi	r29, 0x5F	; 95
 236:	de bf       	out	0x3e, r29	; 62
 238:	00 e0       	ldi	r16, 0x00	; 0
 23a:	0c bf       	out	0x3c, r16	; 60
 23c:	0e 94 ce 01 	call	0x39c	; 0x39c <main>
 240:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <_exit>

00000244 <__bad_interrupt>:
 244:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000248 <system_clocks_init>:
// System Clocks initialization
void system_clocks_init(void)
{
	unsigned char n,s;

	s=SREG;
 248:	9f b7       	in	r25, 0x3f	; 63
	
	OSC.XOSCCTRL=OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_XTAL_16KCLK_gc;
 24a:	e0 e5       	ldi	r30, 0x50	; 80
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	8b ec       	ldi	r24, 0xCB	; 203
 250:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL|=OSC_XOSCEN_bm;
 252:	80 81       	ld	r24, Z
 254:	88 60       	ori	r24, 0x08	; 8
 256:	80 83       	st	Z, r24

	while ((OSC.STATUS & OSC_XOSCRDY_bm)==0);
 258:	81 81       	ldd	r24, Z+1	; 0x01
 25a:	83 ff       	sbrs	r24, 3
 25c:	fd cf       	rjmp	.-6      	; 0x258 <system_clocks_init+0x10>

	n=(OSC.PLLCTRL & (~(OSC_PLLSRC_gm | OSC_PLLDIV_bm | OSC_PLLFAC_gm))) |
 25e:	e0 e5       	ldi	r30, 0x50	; 80
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	85 81       	ldd	r24, Z+5	; 0x05
	OSC_PLLSRC_XOSC_gc | (0<<OSC_PLLDIV_bp) | 2;
	CCP=CCP_IOREG_gc;
 264:	28 ed       	ldi	r18, 0xD8	; 216
 266:	24 bf       	out	0x34, r18	; 52
	OSC.PLLCTRL=n;
 268:	82 ec       	ldi	r24, 0xC2	; 194
 26a:	85 83       	std	Z+5, r24	; 0x05
	// Enable the PLL
	OSC.CTRL|=OSC_PLLEN_bm;
 26c:	80 81       	ld	r24, Z
 26e:	80 61       	ori	r24, 0x10	; 16
 270:	80 83       	st	Z, r24

	n=(CLK.PSCTRL & (~(CLK_PSADIV_gm | CLK_PSBCDIV1_bm | CLK_PSBCDIV0_bm))) |
 272:	e0 e4       	ldi	r30, 0x40	; 64
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	81 81       	ldd	r24, Z+1	; 0x01
 278:	80 78       	andi	r24, 0x80	; 128
	CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;
	CCP=CCP_IOREG_gc;
 27a:	24 bf       	out	0x34, r18	; 52
	CLK.PSCTRL=n;
 27c:	81 83       	std	Z+1, r24	; 0x01

	while ((OSC.STATUS & OSC_PLLRDY_bm)==0);
 27e:	e0 e5       	ldi	r30, 0x50	; 80
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	81 81       	ldd	r24, Z+1	; 0x01
 284:	84 ff       	sbrs	r24, 4
 286:	fd cf       	rjmp	.-6      	; 0x282 <system_clocks_init+0x3a>

	n=(CLK.CTRL & (~CLK_SCLKSEL_gm)) | CLK_SCLKSEL_PLL_gc;
 288:	e0 e4       	ldi	r30, 0x40	; 64
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	88 7f       	andi	r24, 0xF8	; 248
 290:	84 60       	ori	r24, 0x04	; 4
	CCP=CCP_IOREG_gc;
 292:	28 ed       	ldi	r18, 0xD8	; 216
 294:	24 bf       	out	0x34, r18	; 52
	CLK.CTRL=n;
 296:	80 83       	st	Z, r24
	
	OSC.CTRL&= ~(OSC_RC2MEN_bm | OSC_RC32MEN_bm | OSC_RC32KEN_bm);
 298:	e0 e5       	ldi	r30, 0x50	; 80
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	80 81       	ld	r24, Z
 29e:	88 7f       	andi	r24, 0xF8	; 248
 2a0:	80 83       	st	Z, r24

	PORTCFG.CLKEVOUT&= ~(PORTCFG_CLKOUTSEL_gm | PORTCFG_CLKOUT_gm);
 2a2:	e0 eb       	ldi	r30, 0xB0	; 176
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	84 81       	ldd	r24, Z+4	; 0x04
 2a8:	80 7f       	andi	r24, 0xF0	; 240
 2aa:	84 83       	std	Z+4, r24	; 0x04
	SREG=s;
 2ac:	9f bf       	out	0x3f, r25	; 63
 2ae:	08 95       	ret

000002b0 <ports_init>:


// Ports initialization
void ports_init(void)
{
	PORTA.OUT=0x00;
 2b0:	e0 e0       	ldi	r30, 0x00	; 0
 2b2:	f6 e0       	ldi	r31, 0x06	; 6
 2b4:	14 82       	std	Z+4, r1	; 0x04
	PORTA.DIR=0xFF;//todo de salida
 2b6:	8f ef       	ldi	r24, 0xFF	; 255
 2b8:	80 83       	st	Z, r24
	PORTA.PIN0CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
 2ba:	10 8a       	std	Z+16, r1	; 0x10
	PORTA.PIN1CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
 2bc:	11 8a       	std	Z+17, r1	; 0x11
	PORTA.PIN2CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
 2be:	12 8a       	std	Z+18, r1	; 0x12
	PORTA.PIN3CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
 2c0:	13 8a       	std	Z+19, r1	; 0x13
	PORTA.PIN4CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
 2c2:	14 8a       	std	Z+20, r1	; 0x14
	PORTA.PIN5CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
 2c4:	15 8a       	std	Z+21, r1	; 0x15
	PORTA.PIN6CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
 2c6:	16 8a       	std	Z+22, r1	; 0x16
	PORTA.PIN7CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
 2c8:	17 8a       	std	Z+23, r1	; 0x17
	PORTA.INTCTRL=(PORTA.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |
 2ca:	81 85       	ldd	r24, Z+9	; 0x09
 2cc:	80 7f       	andi	r24, 0xF0	; 240
 2ce:	81 87       	std	Z+9, r24	; 0x09
	PORT_INT1LVL_OFF_gc | PORT_INT0LVL_OFF_gc;
	PORTA.INT0MASK=0x00;
 2d0:	12 86       	std	Z+10, r1	; 0x0a
	PORTA.INT1MASK=0x00;
 2d2:	13 86       	std	Z+11, r1	; 0x0b
	
	PORTD.OUT=0x08;//Colocamos 
 2d4:	e0 e6       	ldi	r30, 0x60	; 96
 2d6:	f6 e0       	ldi	r31, 0x06	; 6
 2d8:	88 e0       	ldi	r24, 0x08	; 8
 2da:	84 83       	std	Z+4, r24	; 0x04
	PORTD.DIR=0x08;//tx salida
 2dc:	80 83       	st	Z, r24
	PORTD.PIN0CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
 2de:	10 8a       	std	Z+16, r1	; 0x10
	PORTD.PIN1CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
 2e0:	11 8a       	std	Z+17, r1	; 0x11
	PORTD.PIN2CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
 2e2:	12 8a       	std	Z+18, r1	; 0x12
	PORTD.PIN3CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
 2e4:	13 8a       	std	Z+19, r1	; 0x13
	PORTD.PIN4CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
 2e6:	14 8a       	std	Z+20, r1	; 0x14
	PORTD.PIN5CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
 2e8:	15 8a       	std	Z+21, r1	; 0x15
	PORTD.PIN6CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
 2ea:	16 8a       	std	Z+22, r1	; 0x16
	PORTD.PIN7CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
 2ec:	17 8a       	std	Z+23, r1	; 0x17
	PORTD.INTCTRL=(PORTD.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |
 2ee:	81 85       	ldd	r24, Z+9	; 0x09
 2f0:	80 7f       	andi	r24, 0xF0	; 240
 2f2:	81 87       	std	Z+9, r24	; 0x09
	PORT_INT1LVL_OFF_gc | PORT_INT0LVL_OFF_gc;
	PORTD.INT0MASK=0x00;
 2f4:	12 86       	std	Z+10, r1	; 0x0a
	PORTD.INT1MASK=0x00;
 2f6:	13 86       	std	Z+11, r1	; 0x0b
 2f8:	08 95       	ret

000002fa <usartd0_init>:
	
// USARTD0 initialization
void usartd0_init(void)
{

	PORTD.OUTSET=0x08;//el pin tx debe estar en alto
 2fa:	88 e0       	ldi	r24, 0x08	; 8
 2fc:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
	
	//asicncrono
	//deshabilitamos paridad
	//utilizamos 8 bits de datos
	USARTD0.CTRLC=USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
 300:	e0 ea       	ldi	r30, 0xA0	; 160
 302:	f9 e0       	ldi	r31, 0x09	; 9
 304:	83 e0       	ldi	r24, 0x03	; 3
 306:	85 83       	std	Z+5, r24	; 0x05

	//habilitamos las interrupciones de recepcion de bajo nivel
	USARTD0.CTRLA=(USARTD0.CTRLA & (~(USART_RXCINTLVL_gm | USART_TXCINTLVL_gm | USART_DREINTLVL_gm))) |
 308:	83 81       	ldd	r24, Z+3	; 0x03
 30a:	80 7c       	andi	r24, 0xC0	; 192
 30c:	80 61       	ori	r24, 0x10	; 16
 30e:	83 83       	std	Z+3, r24	; 0x03
	USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
	
	//configuramos el baud rate a 9600bps
	USARTD0.BAUDCTRLA=0xF0;
 310:	80 ef       	ldi	r24, 0xF0	; 240
 312:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB=((0x0C << USART_BSCALE_gp) & USART_BSCALE_gm) | 0x0B;
 314:	8b ec       	ldi	r24, 0xCB	; 203
 316:	87 83       	std	Z+7, r24	; 0x07
	
	//habilitamos el receptor, el transmisor y no utilizamos comunicacion multiprocesador ni doblamos la velocidad
	USARTD0.CTRLB=(USARTD0.CTRLB & (~(USART_RXEN_bm | USART_TXEN_bm | USART_CLK2X_bm | USART_MPCM_bm | USART_TXB8_bm))) |
 318:	84 81       	ldd	r24, Z+4	; 0x04
 31a:	80 7e       	andi	r24, 0xE0	; 224
 31c:	88 61       	ori	r24, 0x18	; 24
 31e:	84 83       	std	Z+4, r24	; 0x04
 320:	08 95       	ret

00000322 <__vector_88>:


ISR(USARTD0_RXC_vect,ISR_NAKED)
{
	char data;
	data=USARTD0.DATA;
 322:	e0 91 a0 09 	lds	r30, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
	
	switch (data)
 326:	8e 2f       	mov	r24, r30
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	a0 e0       	ldi	r26, 0x00	; 0
 32c:	b0 e0       	ldi	r27, 0x00	; 0
 32e:	fc 01       	movw	r30, r24
 330:	e1 56       	subi	r30, 0x61	; 97
 332:	f1 09       	sbc	r31, r1
 334:	e8 30       	cpi	r30, 0x08	; 8
 336:	f1 05       	cpc	r31, r1
 338:	30 f5       	brcc	.+76     	; 0x386 <__vector_88+0x64>
 33a:	88 27       	eor	r24, r24
 33c:	e2 50       	subi	r30, 0x02	; 2
 33e:	ff 4f       	sbci	r31, 0xFF	; 255
 340:	8f 4f       	sbci	r24, 0xFF	; 255
 342:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__tablejump2__>
	{
		case 'a': PORTA.OUT=0x01; break; 
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
 34c:	1e c0       	rjmp	.+60     	; 0x38a <__vector_88+0x68>
		case 'b': PORTA.OUT=0x02; break; 
 34e:	82 e0       	ldi	r24, 0x02	; 2
 350:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
 354:	1a c0       	rjmp	.+52     	; 0x38a <__vector_88+0x68>
		case 'c': PORTA.OUT=0x04; break;
 356:	84 e0       	ldi	r24, 0x04	; 4
 358:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
 35c:	16 c0       	rjmp	.+44     	; 0x38a <__vector_88+0x68>
		case 'd': PORTA.OUT=0x08; break;
 35e:	88 e0       	ldi	r24, 0x08	; 8
 360:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
 364:	12 c0       	rjmp	.+36     	; 0x38a <__vector_88+0x68>
		case 'e': PORTA.OUT=0x10; break;
 366:	80 e1       	ldi	r24, 0x10	; 16
 368:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
 36c:	0e c0       	rjmp	.+28     	; 0x38a <__vector_88+0x68>
		case 'f': PORTA.OUT=0x20; break;
 36e:	80 e2       	ldi	r24, 0x20	; 32
 370:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
 374:	0a c0       	rjmp	.+20     	; 0x38a <__vector_88+0x68>
		case 'g': PORTA.OUT=0x40; break;
 376:	80 e4       	ldi	r24, 0x40	; 64
 378:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
 37c:	06 c0       	rjmp	.+12     	; 0x38a <__vector_88+0x68>
		case 'h': PORTA.OUT=0x80; break;
 37e:	80 e8       	ldi	r24, 0x80	; 128
 380:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
 384:	02 c0       	rjmp	.+4      	; 0x38a <__vector_88+0x68>
		default: PORTA.OUT=0x00; break; 
 386:	10 92 04 06 	sts	0x0604, r1	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
	}
	
	reti();
 38a:	18 95       	reti

0000038c <putchar_usartd0>:
}


void putchar_usartd0(char c)//funcion para enviar datos seriales
{
	while ((USARTD0.STATUS & USART_DREIF_bm) == 0);
 38c:	e0 ea       	ldi	r30, 0xA0	; 160
 38e:	f9 e0       	ldi	r31, 0x09	; 9
 390:	91 81       	ldd	r25, Z+1	; 0x01
 392:	95 ff       	sbrs	r25, 5
 394:	fd cf       	rjmp	.-6      	; 0x390 <putchar_usartd0+0x4>
	USARTD0.DATA=c;
 396:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 39a:	08 95       	ret

0000039c <main>:

int main(void)
{
	unsigned char n;

	n=(PMIC.CTRL & (~(PMIC_RREN_bm | PMIC_IVSEL_bm | PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm))) |	PMIC_LOLVLEN_bm;
 39c:	e0 ea       	ldi	r30, 0xA0	; 160
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	82 81       	ldd	r24, Z+2	; 0x02
 3a2:	88 73       	andi	r24, 0x38	; 56
 3a4:	81 60       	ori	r24, 0x01	; 1
	CCP=CCP_IOREG_gc;
 3a6:	98 ed       	ldi	r25, 0xD8	; 216
 3a8:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL=n;
 3aa:	82 83       	std	Z+2, r24	; 0x02
	
	PMIC.INTPRI=0x00;
 3ac:	11 82       	std	Z+1, r1	; 0x01
	
	system_clocks_init();//habilitamos los relojes dek mcu
 3ae:	0e 94 24 01 	call	0x248	; 0x248 <system_clocks_init>

	ports_init(); //inicializamos los puertos
 3b2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <ports_init>

	usartd0_init();//inicializamos puerto serial
 3b6:	0e 94 7d 01 	call	0x2fa	; 0x2fa <usartd0_init>
	
	sei();
 3ba:	78 94       	sei
	
	while (1)
	{
		putchar_usartd0('a');//enviamos el caracter 'a' cada 300ms
 3bc:	81 e6       	ldi	r24, 0x61	; 97
 3be:	0e 94 c6 01 	call	0x38c	; 0x38c <putchar_usartd0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3c2:	2f ef       	ldi	r18, 0xFF	; 255
 3c4:	8f ef       	ldi	r24, 0xFF	; 255
 3c6:	9a e1       	ldi	r25, 0x1A	; 26
 3c8:	21 50       	subi	r18, 0x01	; 1
 3ca:	80 40       	sbci	r24, 0x00	; 0
 3cc:	90 40       	sbci	r25, 0x00	; 0
 3ce:	e1 f7       	brne	.-8      	; 0x3c8 <main+0x2c>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <main+0x36>
 3d2:	00 00       	nop
 3d4:	f3 cf       	rjmp	.-26     	; 0x3bc <main+0x20>

000003d6 <__tablejump2__>:
 3d6:	ee 0f       	add	r30, r30
 3d8:	ff 1f       	adc	r31, r31
 3da:	88 1f       	adc	r24, r24
 3dc:	8b bf       	out	0x3b, r24	; 59
 3de:	07 90       	elpm	r0, Z+
 3e0:	f6 91       	elpm	r31, Z
 3e2:	e0 2d       	mov	r30, r0
 3e4:	19 94       	eijmp

000003e6 <_exit>:
 3e6:	f8 94       	cli

000003e8 <__stop_program>:
 3e8:	ff cf       	rjmp	.-2      	; 0x3e8 <__stop_program>
