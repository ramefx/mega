
P02_control_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000721  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065c  00000000  00000000  00000999  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000319  00000000  00000000  00000ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001310  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b2  00000000  00000000  00001384  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  00001736  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__vector_5>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 a9 00 	call	0x152	; 0x152 <main>
  78:	0c 94 b4 00 	jmp	0x168	; 0x168 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <conf_puertos>:
	TIMSK1 = 0x00; //no utilizaremos interrupcion
	TIFR1 = 0x00;
}

void start_timer1(){
	TCCR1B = (0<<ICNC1)|(0<<ICES1)|(1<<WGM13)|(0<<WGM12)|(0<<CS12)|(0<<CS11)|(1<<CS10);//iniciamos timer con un preescalador de 1
  80:	84 e0       	ldi	r24, 0x04	; 4
  82:	84 b9       	out	0x04, r24	; 4
  84:	83 e0       	ldi	r24, 0x03	; 3
  86:	87 b9       	out	0x07, r24	; 7
  88:	1a b8       	out	0x0a, r1	; 10
  8a:	18 b8       	out	0x08, r1	; 8
  8c:	08 95       	ret

0000008e <conf_timer1_PWM_Fase_corr>:
  8e:	82 e2       	ldi	r24, 0x22	; 34
  90:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  94:	80 e1       	ldi	r24, 0x10	; 16
  96:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  9a:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
  9e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  a2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  a6:	86 ef       	ldi	r24, 0xF6	; 246
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  ae:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
  b2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  b6:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  ba:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  be:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
  c2:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  c6:	16 ba       	out	0x16, r1	; 22
  c8:	08 95       	ret

000000ca <conf_interrupciones_externas>:
}

void conf_interrupciones_externas(){
	PCICR = (1<<PCIE2)|(0<<PCIE1)|(0<<PCIE0);//habilitamos las interrupciones pinchange de [23:16]
  ca:	84 e0       	ldi	r24, 0x04	; 4
  cc:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCIFR = 0x00; //limpiamos banderas de las interrupciones
  d0:	1b ba       	out	0x1b, r1	; 27
	PCMSK2 = 0xF8;//activamos las interrupciones de la pinchange de [23:16]
  d2:	88 ef       	ldi	r24, 0xF8	; 248
  d4:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
	PCMSK1 = 0x00;//No habilitamos interrupciones pinchange
  d8:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
	PCMSK0	= 0x00; //No habilitamos interrupciones pinchange
  dc:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
  e0:	08 95       	ret

000000e2 <__vector_5>:
}

ISR(PCINT2_vect,ISR_NAKED){
	
	if((PIND & (1<<PIND7))==0)//izquierda
  e2:	4f 99       	sbic	0x09, 7	; 9
  e4:	02 c0       	rjmp	.+4      	; 0xea <__vector_5+0x8>
	{
		PORTC = 0x01;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	88 b9       	out	0x08, r24	; 8
	}
	
	if((PIND & (1<<PIND6))==0)//derecha
  ea:	4e 99       	sbic	0x09, 6	; 9
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <__vector_5+0x10>
	{
		PORTC = 0x02;
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	88 b9       	out	0x08, r24	; 8
	}
	if((PIND & (1<<PIND5))==0)//stop
  f2:	4d 99       	sbic	0x09, 5	; 9
  f4:	02 c0       	rjmp	.+4      	; 0xfa <__vector_5+0x18>
	{
		PORTC = 0x03;
  f6:	83 e0       	ldi	r24, 0x03	; 3
  f8:	88 b9       	out	0x08, r24	; 8
	}
	
	if((PIND & (1<<PIND4))==0)//aumenta
  fa:	4c 99       	sbic	0x09, 4	; 9
  fc:	15 c0       	rjmp	.+42     	; 0x128 <__vector_5+0x46>
	{
		if (OCR1B==240)//Si ORCB1 es igual a 240
  fe:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 102:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 106:	80 3f       	cpi	r24, 0xF0	; 240
 108:	91 05       	cpc	r25, r1
 10a:	39 f4       	brne	.+14     	; 0x11a <__vector_5+0x38>
		{
			OCR1B = 240; //no incrementamos
 10c:	80 ef       	ldi	r24, 0xF0	; 240
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 114:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 118:	07 c0       	rjmp	.+14     	; 0x128 <__vector_5+0x46>
		} 
		else //de lo contrario
		{
			OCR1B += 24;//si no incrementamos
 11a:	ea e8       	ldi	r30, 0x8A	; 138
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	91 81       	ldd	r25, Z+1	; 0x01
 122:	48 96       	adiw	r24, 0x18	; 24
 124:	91 83       	std	Z+1, r25	; 0x01
 126:	80 83       	st	Z, r24
		}
		
	}
	
	if((PIND & (1<<PIND3))==0)//disminuye
 128:	4b 99       	sbic	0x09, 3	; 9
 12a:	12 c0       	rjmp	.+36     	; 0x150 <__vector_5+0x6e>
	{
		if (OCR1B==0)//si orcb1 igual a 0
 12c:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 130:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 134:	00 97       	sbiw	r24, 0x00	; 0
 136:	29 f4       	brne	.+10     	; 0x142 <__vector_5+0x60>
		{
			OCR1B = 0; //se queda en o
 138:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 13c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 140:	07 c0       	rjmp	.+14     	; 0x150 <__vector_5+0x6e>
		} 
		else //de lo contrario
		{
			OCR1B -= 24 ;//decrementa
 142:	ea e8       	ldi	r30, 0x8A	; 138
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	91 81       	ldd	r25, Z+1	; 0x01
 14a:	48 97       	sbiw	r24, 0x18	; 24
 14c:	91 83       	std	Z+1, r25	; 0x01
 14e:	80 83       	st	Z, r24
		}
	
	}
	reti();
 150:	18 95       	reti

00000152 <main>:
}


int main(void)
{
	conf_puertos();
 152:	0e 94 40 00 	call	0x80	; 0x80 <conf_puertos>
	conf_timer1_PWM_Fase_corr();
 156:	0e 94 47 00 	call	0x8e	; 0x8e <conf_timer1_PWM_Fase_corr>
	conf_interrupciones_externas();
 15a:	0e 94 65 00 	call	0xca	; 0xca <conf_interrupciones_externas>
	TIMSK1 = 0x00; //no utilizaremos interrupcion
	TIFR1 = 0x00;
}

void start_timer1(){
	TCCR1B = (0<<ICNC1)|(0<<ICES1)|(1<<WGM13)|(0<<WGM12)|(0<<CS12)|(0<<CS11)|(1<<CS10);//iniciamos timer con un preescalador de 1
 15e:	81 e1       	ldi	r24, 0x11	; 17
 160:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
{
	conf_puertos();
	conf_timer1_PWM_Fase_corr();
	conf_interrupciones_externas();
	start_timer1();
	sei();//habilitamos interrupciones de forma global
 164:	78 94       	sei
	//OCR1B = 200;
    /* Replace with your application code */
    while (1) 
    {
    }
 166:	ff cf       	rjmp	.-2      	; 0x166 <main+0x14>

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
