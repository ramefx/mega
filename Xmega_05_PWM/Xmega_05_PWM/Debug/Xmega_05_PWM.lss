
Xmega_05_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000003fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00000430  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003fa1  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003227  00000000  00000000  0000445d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000706  00000000  00000000  00007684  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00007d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002c2a  00000000  00000000  00007e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004f  00000000  00000000  0000aa2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000aa79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
   8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
   c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  10:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  14:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  18:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  1c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  20:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  24:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  28:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  2c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  30:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  34:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  38:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  3c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  40:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  44:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  48:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  4c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  50:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  54:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  58:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  5c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  60:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  64:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  68:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  6c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  70:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  74:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  78:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  7c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  80:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  84:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  88:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  8c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  90:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  94:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  98:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  9c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  a0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  a4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  a8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  ac:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  b0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  b4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  b8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  bc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  c0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  c4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  c8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  cc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  d0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  d4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  d8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  dc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  e0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  e4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  e8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  ec:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  f0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  f4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  f8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  fc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 100:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 104:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 108:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 10c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 110:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 114:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 118:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 11c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 120:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 124:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 128:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 12c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 130:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 134:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 138:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 13c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 140:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 144:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 148:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 14c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 150:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 154:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 158:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 15c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 160:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 164:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 168:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 16c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 170:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 174:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 178:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 17c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 180:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 184:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 188:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 18c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 190:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 194:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 198:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 19c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1a0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1a4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1a8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1ac:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1b0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1b4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1b8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1bc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1c0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1c4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1c8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1cc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1d0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1d4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1d8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1dc:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1e0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1e4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1e8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1ec:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1f0:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1f4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
 1f8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	0e 94 c8 01 	call	0x390	; 0x390 <main>
 210:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <_exit>

00000214 <__bad_interrupt>:
 214:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000218 <system_clocks_init>:
// System Clocks initialization
void system_clocks_init(void)
{
	unsigned char n,s;

	s=SREG;
 218:	9f b7       	in	r25, 0x3f	; 63
	OSC.XOSCCTRL=OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_XTAL_16KCLK_gc;
 21a:	e0 e5       	ldi	r30, 0x50	; 80
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	8b ec       	ldi	r24, 0xCB	; 203
 220:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL|=OSC_XOSCEN_bm;
 222:	80 81       	ld	r24, Z
 224:	88 60       	ori	r24, 0x08	; 8
 226:	80 83       	st	Z, r24

	while ((OSC.STATUS & OSC_XOSCRDY_bm)==0);
 228:	81 81       	ldd	r24, Z+1	; 0x01
 22a:	83 ff       	sbrs	r24, 3
 22c:	fd cf       	rjmp	.-6      	; 0x228 <system_clocks_init+0x10>

	n=(OSC.PLLCTRL & (~(OSC_PLLSRC_gm | OSC_PLLDIV_bm | OSC_PLLFAC_gm))) |
 22e:	e0 e5       	ldi	r30, 0x50	; 80
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	85 81       	ldd	r24, Z+5	; 0x05
	OSC_PLLSRC_XOSC_gc | (0<<OSC_PLLDIV_bp) | 2;
	CCP=CCP_IOREG_gc;
 234:	28 ed       	ldi	r18, 0xD8	; 216
 236:	24 bf       	out	0x34, r18	; 52
	OSC.PLLCTRL=n;
 238:	82 ec       	ldi	r24, 0xC2	; 194
 23a:	85 83       	std	Z+5, r24	; 0x05

	OSC.CTRL|=OSC_PLLEN_bm;
 23c:	80 81       	ld	r24, Z
 23e:	80 61       	ori	r24, 0x10	; 16
 240:	80 83       	st	Z, r24

	n=(CLK.PSCTRL & (~(CLK_PSADIV_gm | CLK_PSBCDIV1_bm | CLK_PSBCDIV0_bm))) |
 242:	e0 e4       	ldi	r30, 0x40	; 64
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	81 81       	ldd	r24, Z+1	; 0x01
 248:	80 78       	andi	r24, 0x80	; 128
	CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;
	CCP=CCP_IOREG_gc;
 24a:	24 bf       	out	0x34, r18	; 52
	CLK.PSCTRL=n;
 24c:	81 83       	std	Z+1, r24	; 0x01

	while ((OSC.STATUS & OSC_PLLRDY_bm)==0);
 24e:	e0 e5       	ldi	r30, 0x50	; 80
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	81 81       	ldd	r24, Z+1	; 0x01
 254:	84 ff       	sbrs	r24, 4
 256:	fd cf       	rjmp	.-6      	; 0x252 <system_clocks_init+0x3a>

	n=(CLK.CTRL & (~CLK_SCLKSEL_gm)) | CLK_SCLKSEL_PLL_gc;
 258:	e0 e4       	ldi	r30, 0x40	; 64
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	88 7f       	andi	r24, 0xF8	; 248
 260:	84 60       	ori	r24, 0x04	; 4
	CCP=CCP_IOREG_gc;
 262:	28 ed       	ldi	r18, 0xD8	; 216
 264:	24 bf       	out	0x34, r18	; 52
	CLK.CTRL=n;
 266:	80 83       	st	Z, r24

	OSC.CTRL&= ~(OSC_RC2MEN_bm | OSC_RC32MEN_bm | OSC_RC32KEN_bm);
 268:	e0 e5       	ldi	r30, 0x50	; 80
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	88 7f       	andi	r24, 0xF8	; 248
 270:	80 83       	st	Z, r24

	PORTCFG.CLKEVOUT&= ~(PORTCFG_CLKOUTSEL_gm | PORTCFG_CLKOUT_gm);
 272:	e0 eb       	ldi	r30, 0xB0	; 176
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	84 81       	ldd	r24, Z+4	; 0x04
 278:	80 7f       	andi	r24, 0xF0	; 240
 27a:	84 83       	std	Z+4, r24	; 0x04

	SREG=s;
 27c:	9f bf       	out	0x3f, r25	; 63
 27e:	08 95       	ret

00000280 <ports_init>:
}


void ports_init(void)
{
	PORTC.OUT=0x00;
 280:	e0 e4       	ldi	r30, 0x40	; 64
 282:	f6 e0       	ldi	r31, 0x06	; 6
 284:	14 82       	std	Z+4, r1	; 0x04
	PORTC.DIR=0x0F;
 286:	8f e0       	ldi	r24, 0x0F	; 15
 288:	80 83       	st	Z, r24
	PORTC.PIN0CTRL=PORT_OPC_TOTEM_gc;
 28a:	10 8a       	std	Z+16, r1	; 0x10
	PORTC.PIN1CTRL=PORT_OPC_TOTEM_gc;
 28c:	11 8a       	std	Z+17, r1	; 0x11
	PORTC.PIN2CTRL=PORT_OPC_TOTEM_gc;
 28e:	12 8a       	std	Z+18, r1	; 0x12
	PORTC.PIN3CTRL=PORT_OPC_TOTEM_gc;
 290:	13 8a       	std	Z+19, r1	; 0x13
	PORTC.PIN4CTRL=PORT_OPC_TOTEM_gc;
 292:	14 8a       	std	Z+20, r1	; 0x14
	PORTC.PIN5CTRL=PORT_OPC_TOTEM_gc;
 294:	15 8a       	std	Z+21, r1	; 0x15
	PORTC.PIN6CTRL=PORT_OPC_TOTEM_gc;
 296:	16 8a       	std	Z+22, r1	; 0x16
	PORTC.PIN7CTRL=PORT_OPC_TOTEM_gc;
 298:	17 8a       	std	Z+23, r1	; 0x17
	PORTC.INTCTRL=(PORTA.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |PORT_INT1LVL_OFF_gc | PORT_INT0LVL_OFF_gc;
 29a:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <__TEXT_REGION_LENGTH__+0x700609>
 29e:	80 7f       	andi	r24, 0xF0	; 240
 2a0:	81 87       	std	Z+9, r24	; 0x09
	PORTC.INT0MASK=0x00;
 2a2:	12 86       	std	Z+10, r1	; 0x0a
	PORTC.INT1MASK=0x00;
 2a4:	13 86       	std	Z+11, r1	; 0x0b
 2a6:	08 95       	ret

000002a8 <portD_init>:

}
void portD_init(void)
{
	PORTD.OUT=0x00;
 2a8:	e0 e6       	ldi	r30, 0x60	; 96
 2aa:	f6 e0       	ldi	r31, 0x06	; 6
 2ac:	14 82       	std	Z+4, r1	; 0x04
	PORTD.DIR=0x0F;
 2ae:	8f e0       	ldi	r24, 0x0F	; 15
 2b0:	80 83       	st	Z, r24
	PORTD.PIN0CTRL=PORT_OPC_TOTEM_gc;
 2b2:	10 8a       	std	Z+16, r1	; 0x10
	PORTD.PIN1CTRL=PORT_OPC_TOTEM_gc;
 2b4:	11 8a       	std	Z+17, r1	; 0x11
	PORTD.PIN2CTRL=PORT_OPC_TOTEM_gc;
 2b6:	12 8a       	std	Z+18, r1	; 0x12
	PORTD.PIN3CTRL=PORT_OPC_TOTEM_gc;
 2b8:	13 8a       	std	Z+19, r1	; 0x13
	PORTD.PIN4CTRL=PORT_OPC_TOTEM_gc;
 2ba:	14 8a       	std	Z+20, r1	; 0x14
	PORTD.PIN5CTRL=PORT_OPC_TOTEM_gc;
 2bc:	15 8a       	std	Z+21, r1	; 0x15
	PORTD.PIN6CTRL=PORT_OPC_TOTEM_gc;
 2be:	16 8a       	std	Z+22, r1	; 0x16
	PORTD.PIN7CTRL=PORT_OPC_TOTEM_gc;
 2c0:	17 8a       	std	Z+23, r1	; 0x17
	PORTD.INTCTRL=(PORTA.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |PORT_INT1LVL_OFF_gc | PORT_INT0LVL_OFF_gc;
 2c2:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <__TEXT_REGION_LENGTH__+0x700609>
 2c6:	80 7f       	andi	r24, 0xF0	; 240
 2c8:	81 87       	std	Z+9, r24	; 0x09
	PORTD.INT0MASK=0x00;
 2ca:	12 86       	std	Z+10, r1	; 0x0a
	PORTD.INT1MASK=0x00;
 2cc:	13 86       	std	Z+11, r1	; 0x0b
 2ce:	08 95       	ret

000002d0 <T0_init>:

}

void T0_init(){
	unsigned  char n;
	n= SREG;
 2d0:	9f b7       	in	r25, 0x3f	; 63
	TCC0.CTRLA = 0x00; //aseguramos que el timer esta detenido
 2d2:	e0 e0       	ldi	r30, 0x00	; 0
 2d4:	f8 e0       	ldi	r31, 0x08	; 8
 2d6:	10 82       	st	Z, r1
	TCC0.CTRLFSET =0b1100;//Reset timer
 2d8:	8c e0       	ldi	r24, 0x0C	; 12
 2da:	81 87       	std	Z+9, r24	; 0x09
	TCC0.CTRLA = 0x01;//Selecciona preescaler
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	80 83       	st	Z, r24
	//Habilitamos los canales A, B, C, D y Utilizamos PWM Single Slop = PWM rapido
	TCC0.CTRLB=(1<<TC0_CCDEN_bp)|(1<<TC0_CCCEN_bp)|(1<<TC0_CCBEN_bp)|(1<<TC0_CCAEN_bp)|(0<<TC0_WGMODE2_bp)|(1<<TC0_WGMODE1_bp)|(1<<TC0_WGMODE0_bp); 
 2e0:	83 ef       	ldi	r24, 0xF3	; 243
 2e2:	81 83       	std	Z+1, r24	; 0x01
	TCC0.CTRLD=0x00; //no habiloamos los eventos
 2e4:	13 82       	std	Z+3, r1	; 0x03
	TCC0.CTRLE=0x00;//configuramos el timer para funcionamiento de manera normal
 2e6:	14 82       	std	Z+4, r1	; 0x04
	TCC0.INTCTRLA=0x00;//no utilizamos interrupciones de desbordamiento ni de error 
 2e8:	16 82       	std	Z+6, r1	; 0x06
	TCC0.INTCTRLB=0x00; //no utilizamos interrupciones
 2ea:	17 82       	std	Z+7, r1	; 0x07
	HIRESC.CTRLA&=~HIRES_HREN0_bm;//no utilizamos
 2ec:	a0 e9       	ldi	r26, 0x90	; 144
 2ee:	b8 e0       	ldi	r27, 0x08	; 8
 2f0:	8c 91       	ld	r24, X
 2f2:	8e 7f       	andi	r24, 0xFE	; 254
 2f4:	8c 93       	st	X, r24
	TCC0.INTFLAGS=TCC0.INTFLAGS;//limpiamos baderas de interrupciones
 2f6:	84 85       	ldd	r24, Z+12	; 0x0c
 2f8:	84 87       	std	Z+12, r24	; 0x0c
	TCC0.CNT=0x00;//inicializamos el contador en ceros
 2fa:	10 a2       	std	Z+32, r1	; 0x20
 2fc:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.PER=38;//configuramos nuestro TOP en 38 para una frecuencia de 750kHz
 2fe:	26 e2       	ldi	r18, 0x26	; 38
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	26 a3       	std	Z+38, r18	; 0x26
 304:	37 a3       	std	Z+39, r19	; 0x27
	TCC0.CCA = 6;//15% del ciclo util
 306:	26 e0       	ldi	r18, 0x06	; 6
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	20 a7       	std	Z+40, r18	; 0x28
 30c:	31 a7       	std	Z+41, r19	; 0x29
	TCC0.CCB = 10;//25
 30e:	2a e0       	ldi	r18, 0x0A	; 10
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	22 a7       	std	Z+42, r18	; 0x2a
 314:	33 a7       	std	Z+43, r19	; 0x2b
	TCC0.CCC = 12;//
 316:	2c e0       	ldi	r18, 0x0C	; 12
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	24 a7       	std	Z+44, r18	; 0x2c
 31c:	35 a7       	std	Z+45, r19	; 0x2d
	TCC0.CCD = 24;//
 31e:	28 e1       	ldi	r18, 0x18	; 24
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	26 a7       	std	Z+46, r18	; 0x2e
 324:	37 a7       	std	Z+47, r19	; 0x2f
	
	SREG =n;
 326:	9f bf       	out	0x3f, r25	; 63
 328:	08 95       	ret

0000032a <T0D_init>:
}

void T0D_init(){
	unsigned  char n;
	n= SREG;
 32a:	9f b7       	in	r25, 0x3f	; 63
	TCD0.CTRLA = 0x00; //aseguramos que el timer esta detenido
 32c:	e0 e0       	ldi	r30, 0x00	; 0
 32e:	f9 e0       	ldi	r31, 0x09	; 9
 330:	10 82       	st	Z, r1
	TCD0.CTRLFSET =0b1100;//Reset timer
 332:	8c e0       	ldi	r24, 0x0C	; 12
 334:	81 87       	std	Z+9, r24	; 0x09
	TCD0.CTRLA = 0x01;//Selecciona preescaler
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	80 83       	st	Z, r24
	//Habilitamos los canales A, B, C, D y Utilizamos PWM Single Slop = PWM rapido
	TCD0.CTRLB=(1<<TC0_CCDEN_bp)|(1<<TC0_CCCEN_bp)|(1<<TC0_CCBEN_bp)|(1<<TC0_CCAEN_bp)|(0<<TC0_WGMODE2_bp)|(1<<TC0_WGMODE1_bp)|(1<<TC0_WGMODE0_bp);
 33a:	83 ef       	ldi	r24, 0xF3	; 243
 33c:	81 83       	std	Z+1, r24	; 0x01
	TCD0.CTRLD=0x00; //no habiloamos los eventos
 33e:	13 82       	std	Z+3, r1	; 0x03
	TCD0.CTRLE=0x00;//configuramos el timer para funcionamiento de manera normal
 340:	14 82       	std	Z+4, r1	; 0x04
	TCD0.INTCTRLA=0x00;//no utilizamos interrupciones de desbordamiento ni de error
 342:	16 82       	std	Z+6, r1	; 0x06
	TCD0.INTCTRLB=0x00; //no utilizamos interrupciones
 344:	17 82       	std	Z+7, r1	; 0x07
	HIRESD.CTRLA&=~HIRES_HREN0_bm;//no utilizamos
 346:	a0 e9       	ldi	r26, 0x90	; 144
 348:	b9 e0       	ldi	r27, 0x09	; 9
 34a:	8c 91       	ld	r24, X
 34c:	8e 7f       	andi	r24, 0xFE	; 254
 34e:	8c 93       	st	X, r24
	TCD0.INTFLAGS=TCC0.INTFLAGS;//limpiamos baderas de interrupciones
 350:	a0 e0       	ldi	r26, 0x00	; 0
 352:	b8 e0       	ldi	r27, 0x08	; 8
 354:	1c 96       	adiw	r26, 0x0c	; 12
 356:	8c 91       	ld	r24, X
 358:	1c 97       	sbiw	r26, 0x0c	; 12
 35a:	84 87       	std	Z+12, r24	; 0x0c
	TCD0.CNT=0x00;//inicializamos el contador en ceros
 35c:	10 a2       	std	Z+32, r1	; 0x20
 35e:	11 a2       	std	Z+33, r1	; 0x21
	TCD0.PER=626;//configuramos nuestro TOP en 38 para una frecuencia de 750kHz
 360:	22 e7       	ldi	r18, 0x72	; 114
 362:	32 e0       	ldi	r19, 0x02	; 2
 364:	26 a3       	std	Z+38, r18	; 0x26
 366:	37 a3       	std	Z+39, r19	; 0x27
	TCD0.CCA = 94;//15% del ciclo util
 368:	2e e5       	ldi	r18, 0x5E	; 94
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	20 a7       	std	Z+40, r18	; 0x28
 36e:	31 a7       	std	Z+41, r19	; 0x29
	TCD0.CCB = 157;//25
 370:	2d e9       	ldi	r18, 0x9D	; 157
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	22 a7       	std	Z+42, r18	; 0x2a
 376:	33 a7       	std	Z+43, r19	; 0x2b
	TCD0.CCC = 188;//
 378:	2c eb       	ldi	r18, 0xBC	; 188
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	24 a7       	std	Z+44, r18	; 0x2c
 37e:	35 a7       	std	Z+45, r19	; 0x2d
	TCC0.CCD = 388;//
 380:	24 e8       	ldi	r18, 0x84	; 132
 382:	31 e0       	ldi	r19, 0x01	; 1
 384:	9e 96       	adiw	r26, 0x2e	; 46
 386:	2d 93       	st	X+, r18
 388:	3c 93       	st	X, r19
 38a:	9f 97       	sbiw	r26, 0x2f	; 47
	
	SREG =n;
 38c:	9f bf       	out	0x3f, r25	; 63
 38e:	08 95       	ret

00000390 <main>:
}
int main(void)
{
	system_clocks_init();
 390:	0e 94 0c 01 	call	0x218	; 0x218 <system_clocks_init>

	ports_init();
 394:	0e 94 40 01 	call	0x280	; 0x280 <ports_init>
	portD_init();
 398:	0e 94 54 01 	call	0x2a8	; 0x2a8 <portD_init>
	T0_init();
 39c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <T0_init>
	T0D_init();
 3a0:	0e 94 95 01 	call	0x32a	; 0x32a <T0D_init>
	
	while (1)
	{

	}
 3a4:	ff cf       	rjmp	.-2      	; 0x3a4 <main+0x14>

000003a6 <_exit>:
 3a6:	f8 94       	cli

000003a8 <__stop_program>:
 3a8:	ff cf       	rjmp	.-2      	; 0x3a8 <__stop_program>
